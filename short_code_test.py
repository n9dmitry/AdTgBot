from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InputMediaPhoto
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import uuid
import asyncio
import openpyxl
from config import *
from states import *
from validation import *
import json
from enumlist import *

# –ó–∞–≥—Ä—É–∑–∫–∞ JSON –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞
with open('dicts.json', 'r', encoding='utf-8') as file:
    dicts = json.load(file)

dict_car_brands_and_models = dicts.get("dict_car_brands_and_models", {})
dict_car_body_types = dicts.get("dict_car_body_types", {})
dict_car_engine_types = dicts.get("dict_car_engine_types", {})
dict_car_transmission_types = dicts.get("dict_car_transmission_types", {})
dict_car_colors = dicts.get("dict_car_colors", {})
dict_car_document_statuses = dicts.get("dict_car_document_statuses", {})
dict_car_owners = dicts.get("dict_car_owners", {})
dict_car_customs_cleared = dicts.get("dict_car_customs_cleared", {})
dict_currency = dicts.get("dict_currency", {})
dict_car_conditions = dicts.get("dict_car_conditions", {})
dict_car_mileages = dicts.get("dict_car_mileages", {})
dict_edit_buttons = dicts.get("dict_edit_buttons", {})
# –ö–æ–Ω–µ—Ü –∏–º–ø–æ—Ä—Ç–∞ json —Å–ª–æ–≤–∞—Ä–µ–π


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(button_texts, resize_keyboard=True):
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=resize_keyboard, row_width=2)
    buttons = [KeyboardButton(text=text) for text in button_texts]
    keyboard.add(*buttons)
    return keyboard




class CarBotHandler:
    def __init__(self):
        self.lock = asyncio.Lock()



# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

    async def start(self, event, state):
        image_hello_path = ImageDirectory.say_hi
        with open(image_hello_path, "rb") as image_hello:
            self.m = await event.answer_photo(image_hello,
                                     caption=f"–ü—Ä–∏–≤–µ—Ç, {event.from_user.first_name}! –î–∞–≤–∞–π –ø—Ä–æ–¥–∞–¥–∏–º —Ç–≤–æ—ë –∞–≤—Ç–æ! –ù–∞—á–Ω—ë–º –∂–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö!")
        # await asyncio.sleep(2)
        await self.m.delete()
        # self.m = await event.answer(f"–ü—Ä–∏–≤–µ—Ç, {event.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º.")
        keyboard = create_keyboard(list(dict_car_brands_and_models.keys()))
        image_path = ImageDirectory.car_brand  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        with open(image_path, "rb") as image:
            self.m = await event.answer_photo(image, caption="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
        # self.m = await event.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
        await state.set_state(User.STATE_CAR_BRAND)



    async def get_car_brand(self, event, state):
        user_data = (await state.get_data()).get("user_data", {})
        await self.m.delete()

        selected_brand = event.text
        valid_brands = dict_car_brands_and_models
        if await validate_car_brand(selected_brand, valid_brands):
            user_data["car_brand"] = selected_brand
            await state.update_data(user_data=user_data)
            # await self.delete_previous_question(event)
            # await self.delete_hello(event)
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            # keyboard = create_keyboard(
            #     dict_car_brands_and_models[selected_brand])
            # image_path = ImageDirectory.car_model
            # with open(image_path, "rb") as image:
            #     self.m = await event.answer_photo(image, caption="–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
            self.m = await event.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ:")
            await state.set_state(User.STATE_CAR_PHOTO)
        else:
#             await self.delete_previous_question(event)
#             await self.delete_hello(event)
            keyboard = create_keyboard(dict_car_brands_and_models.keys())
            self.m = await bot.send_message(event.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –µ—Å–ª–∏ –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞ –Ω–µ—Ç", reply_markup=keyboard)
            await state.set_state(User.STATE_CAR_BRAND)

    # async def write_data_to_excel(self, user_data):
    #     if os.path.exists('udb.xlsx'):
    #         workbook = openpyxl.load_workbook('udb.xlsx')
    #     else:
    #         workbook = openpyxl.Workbook()
    #
    #     ws = workbook.active
    #
    #     column_headers = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–¢–µ–ª–µ–≥—Ä–∞–º']
    #     data_row = [user_data.get(field, '') for field in ['car_brand', 'seller_phone']]
    #
    #     # Find the next available row number
    #     row_num = ws.max_row + 1
    #
    #     # Write column headers if the file is new
    #     if row_num == 2:
    #         for col_num, header in enumerate(column_headers, start=1):
    #             ws.cell(row=1, column=col_num, value=header)
    #
    #     # Write data row
    #     for col_num, data in enumerate(data_row, start=1):
    #         ws.cell(row=row_num, column=col_num, value=data)
    #
    #     # Save the Excel file
    #     await self.save_excel_asynchronous('udb.xlsx', workbook)
    #
    # async def save_excel_asynchronous(self, filename, workbook):
    #     loop = asyncio.get_event_loop()
    #     await loop.run_in_executor(None, workbook.save, filename)

    async def write_to_excel(self, event, user_data):
        file_path = 'output.xlsx'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª Excel
        if os.path.exists(file_path):
            workbook = openpyxl.load_workbook(file_path)
        else:
            workbook = openpyxl.Workbook()

        sheet = workbook.active

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if sheet.max_row == 1:
            headers = [
                'Car Brand-Model', 'Year', 'Mileage (km)', 'Transmission Type',
                'Body Type', 'Engine Type', 'Engine Volume (L)', 'Power (hp)',
                'Color', 'Document Status', 'Number of Owners', 'Customs Cleared',
                'Condition', 'Additional Description', 'Price', 'Currency',
                'Location', 'Seller Name', 'Seller Phone', 'Telegram'
            ]
            sheet.append(headers)

        row_data = [
            user_data.get('user_data').get('car_brand', '') + '-' + user_data.get('user_data').get('car_model', ''),
            user_data.get('user_data').get('car_year', ''),
            user_data.get('user_data').get('car_mileage', ''),
            user_data.get('user_data').get('car_transmission_type', ''),
            user_data.get('user_data').get('car_body_type', ''),
            user_data.get('user_data').get('car_engine_type', ''),
            user_data.get('user_data').get('car_engine_volume', ''),
            user_data.get('user_data').get('car_power', ''),
            user_data.get('user_data').get('car_color', ''),
            user_data.get('user_data').get('car_document_status', ''),
            user_data.get('user_data').get('car_owners', ''),
            '–î–∞' if user_data.get('user_data').get('car_customs_cleared') else '–ù–µ—Ç',
            user_data.get('user_data').get('car_condition', ''),
            user_data.get('user_data').get('car_description', ''),
            user_data.get('user_data').get('car_price', ''),
            user_data.get('user_data').get('currency', ''),
            user_data.get('user_data').get('car_location', ''),
            user_data.get('user_data').get('seller_name', ''),
            user_data.get('user_data').get('seller_phone', ''),
            event.from_user.username if event.from_user.username is not None else '–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        ]

        sheet.append(row_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        workbook.save(file_path)

    async def handle_photos(self, event, state):
        user_id = event.from_user.id
        user_data = await state.get_data('user_data')
        photo_id = event.photo[-1].file_id

        caption = (
            f"üõû <b>#{user_data.get('user_data').get('car_brand')}-{user_data.get('user_data').get('car_model')}</b>\n\n"
            f"   <b>-–ì–æ–¥:</b> {user_data.get('user_data', {}).get('car_year')}\n"
            f"   <b>-–ü—Ä–æ–±–µ–≥ (–∫–º.):</b> {user_data.get('user_data').get('car_mileage')}\n"
            f"   <b>-–¢–∏–ø –ö–ü–ü:</b> {user_data.get('user_data').get('car_transmission_type')}\n"
            f"   <b>-–ö—É–∑–æ–≤:</b> {user_data.get('user_data').get('car_body_type')}\n"
            f"   <b>-–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {user_data.get('user_data').get('car_engine_type')}\n"
            f"   <b>-–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.):</b> {user_data.get('user_data').get('car_engine_volume')}\n"
            f"   <b>-–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.):</b> {user_data.get('user_data').get('car_power')}\n"
            f"   <b>-–¶–≤–µ—Ç:</b> {user_data.get('user_data').get('car_color')}\n"
            f"   <b>-–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {user_data.get('user_data').get('car_document_status')}\n"
            f"   <b>-–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:</b> {user_data.get('user_data').get('car_owners')}\n"
            f"   <b>-–†–∞—Å—Ç–∞–º–æ–∂–∫–∞:</b> {'–î–∞' if user_data.get('user_data').get('car_customs_cleared') else '–ù–µ—Ç'}\n"
            f"   <b>-–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {user_data.get('user_data').get('car_condition')}\n\n"
            f"‚ÑπÔ∏è <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {user_data.get('user_data').get('car_description')}\n\n"
            f"üî• <b>–¶–µ–Ω–∞:</b> {user_data.get('user_data').get('car_price')} {user_data.get('user_data').get('currency')}\n\n"
            f"üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {user_data.get('user_data').get('car_location')}\n"
            f"üë§ <b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> <span class='tg-spoiler'> {user_data.get('user_data').get('seller_name')} </span>\n"
            f"üì≤ <b>–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> <span class='tg-spoiler'>{user_data.get('user_data').get('seller_phone')} </span>\n"
            f"üí¨ <b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> <span class='tg-spoiler'>{event.from_user.username if event.from_user.username is not None else '–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}</span>\n\n"
            f"–û–û–û '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ' –ê–≤—Ç–æ –≤ –î–ù–† (link: —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞–≤—Ç–æ)"
        )

        photo_uuid = str(uuid.uuid4())

        if "sent_photos" not in user_data:
            user_data["sent_photos"] = []

        user_data["sent_photos"].append(
            {"file_id": photo_id, "uuid": photo_uuid})

        photo = InputMediaPhoto(media=photo_id, caption=caption, parse_mode=types.ParseMode.HTML)
        buffered_photos.append(photo)

        # if len(buffered_photos) > 1:
        #     for i in range(len(buffered_photos)):
        #         buffered_photos[i].caption = None

        # last_photo = buffered_photos[-1]
        # last_photo.caption = caption



        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("–°–ª–µ–¥—É—â–∏–π —à–∞–≥")
            )

        print(len(buffered_photos))
        await event.reply('–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ', reply_markup=keyboard)


        # # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        # if len(buffered_photos) > 1:
        #     await bot.send_media_group(chat_id=event.chat.id, media=buffered_photos, disable_notification=True)
        #     await event.answer(f"–§–æ—Ç–æ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.")


        await state.finish()

    async def preview_advertisement(self, event, caption):
        for i in range(len(buffered_photos)):
            buffered_photos[i].caption = None

        last_photo = buffered_photos[-1]
        last_photo.caption = self.caption

        await event.reply("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        await asyncio.sleep(2)
        await bot.send_media_group(chat_id=event.chat.id, media=buffered_photos, disable_notification=True)


        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª"),
            KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"),
        )
        await event.reply(
            "–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –ª–∏–±–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ.",
            reply_markup=keyboard)



    # async def preview_advertisement(self, event):
    #     await event.reply("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    #     await asyncio.sleep(2)
    #     await bot.send_media_group(chat_id=event.chat.id, media=buffered_photos, disable_notification=True)
    #
    #
    #     keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
    #         KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª"),
    #         KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"),
    #     )
    #     await event.reply(
    #         "–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –ª–∏–±–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ.",
    #         reply_markup=keyboard)
    #
    # async def send_advertisement(self, event):
    #     user_id = event.from_user.id
    #     await self.m.delete()
    #     async with lock:
    #         await bot.send_media_group(chat_id=CHANNEL_ID, media=buffered_photos, disable_notification=True)
    #         await bot.send_message(user_id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!")
    #
    # async def fill_again(self, event, state):
    #     keyboard = create_keyboard(list(dict_car_brands_and_models.keys()))
    #     image_path = ImageDirectory.car_brand  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    #     with open(image_path, "rb") as image:
    #         self.m = await event.answer_photo(image, caption="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
    #     # self.m = await event.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
    #     buffered_photos.clear()
    #     await state.set_state(User.STATE_CAR_BRAND)


car_bot = CarBotHandler()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
lock = asyncio.Lock()
buffered_photos = []


@dp.message_handler(commands=["start"])
async def cmd_start(event: types.Message, state: FSMContext):
    await car_bot.start(event, state)


@dp.message_handler(state=User.STATE_CAR_BRAND)
async def process_brand_selection(event: types.Message, state: FSMContext):
    await car_bot.get_car_brand(event, state)

@dp.message_handler(state=User.STATE_CAR_PHOTO, content_types=['photo'])
async def handle_photos(event: types.Message, state: FSMContext):
    print('STATE:', state, event)
    await car_bot.handle_photos(event, state)

@dp.message_handler(lambda message: message.text == "–°–ª–µ–¥—É—â–∏–π —à–∞–≥")
async def preview_advertisement(event: types.Message, state: FSMContext):
    await car_bot.preview_advertisement(event)


@dp.message_handler(lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª")
async def send_advertisement(event: types.Message, state: FSMContext):
    await car_bot.send_advertisement(event)


@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
async def fill_again(event: types.Message, state: FSMContext):
    await car_bot.fill_again(event, state)





# —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)