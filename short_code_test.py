from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import InputMediaPhoto
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import uuid
import asyncio
import openpyxl
from config import *
from states import *
from validation import *
import json
from enumlist import *

# –ó–∞–≥—Ä—É–∑–∫–∞ JSON –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞
with open('dicts.json', 'r', encoding='utf-8') as file:
    dicts = json.load(file)

dict_car_brands_and_models = dicts.get("dict_car_brands_and_models", {})
dict_car_body_types = dicts.get("dict_car_body_types", {})
dict_car_engine_types = dicts.get("dict_car_engine_types", {})
dict_car_transmission_types = dicts.get("dict_car_transmission_types", {})
dict_car_colors = dicts.get("dict_car_colors", {})
dict_car_document_statuses = dicts.get("dict_car_document_statuses", {})
dict_car_owners = dicts.get("dict_car_owners", {})
dict_car_customs_cleared = dicts.get("dict_car_customs_cleared", {})
dict_currency = dicts.get("dict_currency", {})
dict_car_conditions = dicts.get("dict_car_conditions", {})
dict_car_mileages = dicts.get("dict_car_mileages", {})
dict_edit_buttons = dicts.get("dict_edit_buttons", {})
# –ö–æ–Ω–µ—Ü –∏–º–ø–æ—Ä—Ç–∞ json —Å–ª–æ–≤–∞—Ä–µ–π


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(button_texts, resize_keyboard=True):
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=resize_keyboard, row_width=2)
    buttons = [KeyboardButton(text=text) for text in button_texts]
    keyboard.add(*buttons)
    return keyboard




class CarBotHandler:
    def __init__(self):
        self.lock = asyncio.Lock()



# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

    async def start(self, event, state):
        image_hello_path = ImageDirectory.say_hi
        with open(image_hello_path, "rb") as image_hello:
            self.m = await event.answer_photo(image_hello,
                                     caption=f"–ü—Ä–∏–≤–µ—Ç, {event.from_user.first_name}! –î–∞–≤–∞–π –ø—Ä–æ–¥–∞–¥–∏–º —Ç–≤–æ—ë –∞–≤—Ç–æ! –ù–∞—á–Ω—ë–º –∂–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö!")
        await asyncio.sleep(2)
        await self.m.delete()
        # self.m = await event.answer(f"–ü—Ä–∏–≤–µ—Ç, {event.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º.")
        keyboard = create_keyboard(list(dict_car_brands_and_models.keys()))
        image_path = ImageDirectory.car_brand  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        with open(image_path, "rb") as image:
            self.m = await event.answer_photo(image, caption="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
        # self.m = await event.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
        await state.set_state(User.STATE_CAR_BRAND)



    async def get_car_brand(self, event, state):
        user_data = (await state.get_data()).get("user_data", {})
        await self.m.delete()

        selected_brand = event.text
        valid_brands = dict_car_brands_and_models
        if await validate_car_brand(selected_brand, valid_brands):
            user_data["car_brand"] = selected_brand
            await state.update_data(user_data=user_data)
            # await self.delete_previous_question(event)
            # await self.delete_hello(event)
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            # keyboard = create_keyboard(
            #     dict_car_brands_and_models[selected_brand])
            # image_path = ImageDirectory.car_model
            # with open(image_path, "rb") as image:
            #     self.m = await event.answer_photo(image, caption="–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
            self.m = await event.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ:")
            await state.set_state(User.STATE_CAR_PHOTO)
        else:
#             await self.delete_previous_question(event)
#             await self.delete_hello(event)
            keyboard = create_keyboard(dict_car_brands_and_models.keys())
            self.m = await bot.send_message(event.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –µ—Å–ª–∏ –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞ –Ω–µ—Ç", reply_markup=keyboard)
            await state.set_state(User.STATE_CAR_BRAND)

    async def handle_photos(self, event, state):
        user_data = await state.get_data('user_data')
        user_id = event.from_user.id
        photo_id = event.photo[-1].file_id

        caption = (
            f"üõû <b>#{user_data.get('user_data').get('car_brand')}-{user_data.get('user_data').get('car_model')}</b>\n\n"
            f"   <b>-–ì–æ–¥:</b> {user_data.get('user_data', {}).get('car_year')}\n"
            f"   <b>-–ü—Ä–æ–±–µ–≥ (–∫–º.):</b> {user_data.get('user_data').get('car_mileage')}\n"
            f"   <b>-–¢–∏–ø –ö–ü–ü:</b> {user_data.get('user_data').get('car_transmission_type')}\n"
            f"   <b>-–ö—É–∑–æ–≤:</b> {user_data.get('user_data').get('car_body_type')}\n"
            f"   <b>-–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {user_data.get('user_data').get('car_engine_type')}\n"
            f"   <b>-–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.):</b> {user_data.get('user_data').get('car_engine_volume')}\n"
            f"   <b>-–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.):</b> {user_data.get('user_data').get('car_power')}\n"
            f"   <b>-–¶–≤–µ—Ç:</b> {user_data.get('user_data').get('car_color')}\n"
            f"   <b>-–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {user_data.get('user_data').get('car_document_status')}\n"
            f"   <b>-–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:</b> {user_data.get('user_data').get('car_owners')}\n"
            f"   <b>-–†–∞—Å—Ç–∞–º–æ–∂–∫–∞:</b> {'–î–∞' if user_data.get('user_data').get('car_customs_cleared') else '–ù–µ—Ç'}\n"
            f"   <b>-–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {user_data.get('user_data').get('car_condition')}\n\n"
            f"‚ÑπÔ∏è<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {user_data.get('user_data').get('car_description')}\n\n"
            f"üî•<b>–¶–µ–Ω–∞:</b> {user_data.get('user_data').get('car_price')} {user_data.get('user_data').get('currency')}\n\n"
            f"üìç<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {user_data.get('user_data').get('car_location')}\n"
            f"üë§<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> <span class='tg-spoiler'> {user_data.get('user_data').get('seller_name')} </span>\n"
            f"üì≤<b>–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> <span class='tg-spoiler'>{user_data.get('user_data').get('seller_phone')} </span>\n"
            f"üí¨<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> <span class='tg-spoiler'>{event.from_user.username if event.from_user.username is not None else '–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}</span>\n\n"
            f"–û–û–û '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ' –ê–≤—Ç–æ –≤ –î–ù–† (link: —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞–≤—Ç–æ)"
        )




        print(user_data)
        photo_uuid = str(uuid.uuid4())

        if "sent_photos" not in user_data:
            user_data["sent_photos"] = []

        user_data["sent_photos"].append(
            {"file_id": photo_id, "uuid": photo_uuid})
        buffered_photos.append(InputMediaPhoto(
            media=photo_id, caption=caption, parse_mode=types.ParseMode.HTML))
        # await self.m.delete()
        if len(buffered_photos) > 1:
            for i in range(len(buffered_photos) - 1):
                buffered_photos[i].caption = None
            last_photo = buffered_photos[-1]
            last_photo.caption = caption


        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("–°–ª–µ–¥—É—â–∏–π —à–∞–≥")
        )


        #
        #
        # def check_duplicate_rows(ws, data_row):
        #     for row in ws.iter_rows(min_row=2, max_row=ws.max_row, min_col=1, max_col=len(data_row)):
        #         if all([str(cell.value) == str(data_row[i]) for i, cell in enumerate(row)]):
        #             return True
        #     return False
        #
        # # Save user_data to Excel file
        # excel_file_path = "db.xlsx"
        # wb = openpyxl.load_workbook(excel_file_path) if os.path.exists(excel_file_path) else openpyxl.Workbook()
        # ws = wb.active
        # sheet = wb.active
        # column_headers = [
        #     '–ù–∞–∑–≤–∞–Ω–∏–µ', '–ú–æ–¥–µ–ª—å', '–ì–æ–¥', '–ü—Ä–æ–±–µ–≥ (–∫–º.)', '–¢–∏–ø –ö–ü–ü', '–ö—É–∑–æ–≤', '–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è',
        #     '–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.)', '–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.)', '–¶–≤–µ—Ç', '–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤',
        #     '–†–∞—Å—Ç–∞–º–æ–∂–∫–∞', '–°–æ—Å—Ç–æ—è–Ω–∏–µ', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–¶–µ–Ω–∞', '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
        #     '–ü—Ä–æ–¥–∞–≤–µ—Ü', '–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞', '–¢–µ–ª–µ–≥—Ä–∞–º'
        # ]
        # data_row = []
        # if data_row == []:
        #     data_row = [user_data['user_data'].get(field, '') for field in [
        #         'car_brand', 'car_model', 'car_year', 'car_mileage', 'car_transmission_type',
        #         'car_body_type', 'car_engine_type', 'car_engine_volume', 'car_power', 'car_color',
        #         'car_document_status', 'car_owners', 'car_customs_cleared', 'car_condition',
        #         'car_description', 'car_price', 'car_location', 'seller_name', 'seller_phone'
        #     ]]
        #     data_row.append(event.from_user.username if event.from_user.username is not None else '–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        # else:
        #     pass
        #
        # if not ws['A1'].value:  # Check if the headers are not already written
        #     for i, header in enumerate(column_headers, start=1):
        #         ws.cell(row=1, column=i).value = header
        #
        # # Check for duplicate rows before appending
        # if not check_duplicate_rows(ws, data_row):
        #     sheet.append(data_row)
        #
        #
        #
        # # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–Ω–∏–≥–∏
        # wb.save(excel_file_path)


        self.m = await event.reply("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=keyboard)
        await state.finish()


    async def preview_advertisement(self, event):
        await bot.send_media_group(chat_id=event.chat.id, media=buffered_photos, disable_notification=True)


        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª"),
            KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"),
        )
        await event.reply("–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –ª–∏–±–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=keyboard)

    async def send_advertisement(self, event):
        user_id = event.from_user.id
        await self.m.delete()
        async with lock:
            await bot.send_media_group(chat_id=CHANNEL_ID, media=buffered_photos, disable_notification=True)
            await bot.send_message(user_id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!")

            buffered_photos.clear()

    async def fill_again(self, event, state):
        keyboard = create_keyboard(list(dict_car_brands_and_models.keys()))
        image_path = ImageDirectory.car_brand # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        with open(image_path, "rb") as image:
            self.m = await event.answer_photo(image, caption="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
        # self.m = await event.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
        buffered_photos.clear()
        await state.set_state(User.STATE_CAR_BRAND)


car_bot = CarBotHandler()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
lock = asyncio.Lock()
buffered_photos = []


@dp.message_handler(commands=["start"])
async def cmd_start(event: types.Message, state: FSMContext):
    await car_bot.start(event, state)


@dp.message_handler(state=User.STATE_CAR_BRAND)
async def process_brand_selection(event: types.Message, state: FSMContext):
    await car_bot.get_car_brand(event, state)

@dp.message_handler(state=User.STATE_CAR_PHOTO, content_types=['photo'])
async def handle_photos(event: types.Message, state: FSMContext):
    await car_bot.handle_photos(event, state)


@dp.message_handler(lambda message: message.text == "–°–ª–µ–¥—É—â–∏–π —à–∞–≥")
async def preview_advertisement(event: types.Message):
    await car_bot.preview_advertisement(event)


@dp.message_handler(lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª")
async def send_advertisement(event: types.Message):
    await car_bot.send_advertisement(event)


@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
async def fill_again(event: types.Message, state: FSMContext):
    await car_bot.fill_again(event, state)





# —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
