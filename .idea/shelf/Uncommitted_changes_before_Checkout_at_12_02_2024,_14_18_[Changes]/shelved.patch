Index: bot v8.5.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from aiogram import Bot, Dispatcher, types, executor\nfrom aiogram.types import InputMediaPhoto\nfrom aiogram.contrib.fsm_storage.memory import MemoryStorage\nfrom aiogram.dispatcher import FSMContext\nfrom aiogram.types import ReplyKeyboardMarkup, KeyboardButton\nimport random\nimport datetime\nimport uuid\nimport asyncio\nimport openpyxl\nfrom config import *\nfrom states import *\nfrom validation import *\nimport json\nfrom enumlist import *\n\n# Загрузка JSON в начале скрипта\nwith open('dicts.json', 'r', encoding='utf-8') as file:\n    dicts = json.load(file)\n\ndict_car_brands_and_models = dicts.get(\"dict_car_brands_and_models\", {})\ndict_car_body_types = dicts.get(\"dict_car_body_types\", {})\ndict_car_engine_types = dicts.get(\"dict_car_engine_types\", {})\ndict_car_transmission_types = dicts.get(\"dict_car_transmission_types\", {})\ndict_car_colors = dicts.get(\"dict_car_colors\", {})\ndict_car_document_statuses = dicts.get(\"dict_car_document_statuses\", {})\ndict_car_owners = dicts.get(\"dict_car_owners\", {})\ndict_car_customs_cleared = dicts.get(\"dict_car_customs_cleared\", {})\ndict_currency = dicts.get(\"dict_currency\", {})\ndict_car_conditions = dicts.get(\"dict_car_conditions\", {})\ndict_car_mileages = dicts.get(\"dict_car_mileages\", {})\ndict_edit_buttons = dicts.get(\"dict_edit_buttons\", {})\n# Конец импорта json словарей\n\n\n# Создание клавиатуры\ndef create_keyboard(button_texts, resize_keyboard=True):\n    keyboard = ReplyKeyboardMarkup(\n        resize_keyboard=resize_keyboard, row_width=2)\n    buttons = [KeyboardButton(text=text) for text in button_texts]\n    keyboard.add(*buttons)\n    return keyboard\n\n\n\n\nclass CarBotHandler:\n    def __init__(self):\n        self.lock = asyncio.Lock()\n\n\n# Команды\n\n    async def restart(self, event, state):\n        # В этом методе вы должны определить логику перезапуска вашего бота\n        # # await self.m.delete()\n        await state.finish()  # Завершаем текущее состояние FSM\n        await event.answer(\"Бот перезапущен.\")  # Отправляем сообщение о перезапуске\n        await self.start(event, state)  # Запускаем начальное действие вашего бота\n\n\n    async def support(self, event, state):\n        await state.finish()\n        self.secret_number = str(random.randint(100, 999))\n\n        await event.answer(f\"Нашли баг? Давайте отправим сообщение разработчикам! \"\n                             f\"Но перед этим введите проверку. Докажите что вы не робот. Напишите число {self.secret_number}:\")\n        await state.set_state(User.STATE_SUPPORT_VALIDATION)\n\n    async def support_validation(self, event, state):\n        if event.text.isdigit() and event.text == self.secret_number:\n            await event.reply(f\"Проверка пройдена успешно!\")\n            await asyncio.sleep(1)\n            await event.answer(f\"Опишите техническую проблему в деталях для разработчиков: \")\n            await state.set_state(User.STATE_SUPPORT_MESSAGE)\n        else:\n            await event.answer(f\"Попробуйте ещё раз!\")\n            await asyncio.sleep(1)\n            await cmd_support(event, state)\n\n    async def support_message(self, event: types.Message, state):\n        # Получаем текущую дату и время\n        current_time = datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n        # Формируем строку для записи в файл\n        message_to_write = f\"\"\"\n        Дата: {current_time}\n        Имя: {event.from_user.full_name}\n        Telegram @{event.from_user.username or event.from_user.id} \n      \n        Сообщение: {event.text}\n        ...\n            \"\"\"\n\n        # Открываем файл для записи и записываем сообщение\n        with open(\"support.txt\", \"a\") as file:\n            file.write(message_to_write)\n        keyboard = create_keyboard(['Перезагрузить бота'])\n        await event.reply(\"Спасибо за ваше сообщение! Мы рассмотрим вашу проблему!\", reply_markup=keyboard)\n        await state.set_state(User.STATE_SUPPORT_END)\n    async def support_end(selfself, event, state):\n        if event.text == 'Перезагрузить бота':\n            await cmd_restart(event, state)\n        await state.finish()\n\n\n\n# Начало работы бота\n\n    async def start(self, event, state):\n        image_hello_path = ImageDirectory.say_hi\n        with open(image_hello_path, \"rb\") as image_hello:\n            self.m = await event.answer_photo(image_hello,\n                                     caption=f\"Привет, {event.from_user.first_name}! Давай продадим твоё авто! Начнём же сбор данных!\")\n        await asyncio.sleep(2)\n        # # await self.m.delete()\n        # self.m = await event.answer(f\"Привет, {event.from_user.first_name}! Я бот для сбора данных. Давай начнем.\")\n        keyboard = create_keyboard(list(dict_car_brands_and_models.keys()))\n        image_path = ImageDirectory.car_brand  # Путь к вашему изображению\n        with open(image_path, \"rb\") as image:\n            self.m = await event.answer_photo(image, caption=\"Выберите бренд автомобиля:\", reply_markup=keyboard)\n        # self.m = await event.answer(\"Выберите бренд автомобиля:\", reply_markup=keyboard)\n        await state.set_state(User.STATE_CAR_BRAND)\n\n\n\n\n    async def get_car_brand(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n\n        selected_brand = event.text\n        valid_brands = dict_car_brands_and_models\n        if await validate_car_brand(selected_brand, valid_brands):\n            user_data[\"car_brand\"] = selected_brand\n            await state.update_data(user_data=user_data)\n            # await self.delete_previous_question(event)\n            # await self.delete_hello(event)\n            # Создаем клавиатуру\n            keyboard = create_keyboard(\n                dict_car_brands_and_models[selected_brand])\n            image_path = ImageDirectory.car_model\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Отлично! Выберите модель автомобиля:\", reply_markup=keyboard)\n            # self.m = await event.answer(\"Отлично! Выберите модель автомобиля:\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_MODEL)\n        else:\n#             await self.delete_previous_question(event)\n#             await self.delete_hello(event)\n            keyboard = create_keyboard(dict_car_brands_and_models.keys())\n            self.m = await bot.send_message(event.from_user.id, \"Пожалуйста, выберите бренд из предложенных вариантов или напишите нам если вашего бренда нет\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_BRAND)\n\n    async def get_car_model(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        car_brand = user_data.get(\"car_brand\", \"\")\n        valid_models = dict_car_brands_and_models.get(car_brand, [])\n\n        if await validate_car_model(event.text, valid_models):\n            user_data[\"car_model\"] = event.text\n            await state.update_data(user_data=user_data)\n#             await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_year\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Какой год выпуска у автомобиля? (напишите)\")\n            # self.m = await event.answer(\"Какой год выпуска у автомобиля? (напишите)\")\n            await state.set_state(User.STATE_CAR_YEAR)\n        else:\n#             await self.delete_previous_question(event)\n            keyboard = create_keyboard(valid_models)\n            self.m = await bot.send_message(event.from_user.id, \"Пожалуйста, выберите модель из предложенных вариантов.\",\n                                   reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_MODEL)\n\n    async def get_car_year(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # # await self.m.delete()\n\n        if await validate_year(event.text):\n            user_data[\"car_year\"] = event.text\n            keyboard = create_keyboard(dict_car_body_types)\n            await state.update_data(user_data=user_data)\n            # await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_body_type\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Отлично! Какой тип кузова у автомобиля?\", reply_markup=keyboard)\n            # self.m = await event.answer(\"Отлично! Какой тип кузова у автомобиля?\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_BODY_TYPE)\n        else:\n            # await self.delete_previous_question(event)\n            self.m = await event.answer(\"Пожалуйста, введите год в формате YYYY (например, 1990 или 2024)\")\n            await state.set_state(User.STATE_CAR_YEAR)\n\n    async def get_car_body_type(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        if await validate_button_input(event.text, dict_car_body_types):\n            user_data[\"car_body_type\"] = event.text\n            keyboard = create_keyboard(dict_car_engine_types)\n            await state.update_data(user_data=user_data)\n            # await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_engine_type\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Отлично! Какой тип двигателя у автомобиля?\", reply_markup=keyboard)\n            # self.m = await event.answer(\"Отлично! Какой тип двигателя у автомобиля?\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_ENGINE_TYPE)\n        else:\n            # await self.delete_previous_question(event)\n            keyboard = create_keyboard(dict_car_body_types)\n            self.m = await event.answer(\"Пожалуйста, выберите корректный тип кузова.\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_BODY_TYPE)\n\n    async def get_car_engine_type(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        if await validate_button_input(event.text, dict_car_engine_types):\n            user_data[\"car_engine_type\"] = event.text\n            # Добавляем кнопки на основе словаря\n            await state.update_data(user_data=user_data)\n            # await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_engine_volume\n            with open(image_path, \"rb\") as image:\n                self.m = self.m = await event.answer_photo(image, caption=\"Хорошо! Какой объем двигателя у автомобиля (л.)? (напишите через точку: например 1.6)\")\n            # self.m = await event.answer(\"Хорошо! Какой объем двигателя у автомобиля (л.)? (напишите через точку: например 1.6)\")\n            await state.set_state(User.STATE_CAR_ENGINE_VOLUME)\n        else:\n            # await self.delete_previous_question(event)\n            keyboard = create_keyboard(dict_car_engine_types)\n            self.m = await event.answer(\"Пожалуйста, выберите корректный тип двигателя.\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_ENGINE_TYPE)\n\n    async def get_car_engine_volume(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        try:\n            if \",\" in event.text:\n                event.text = event.text.replace(',', '.')\n            event.text = float(event.text)\n\n            if await validate_engine_volume(event.text):\n                user_data[\"car_engine_volume\"] = event.text\n\n                # Добавляем кнопки на основе словаря\n\n                await state.update_data(user_data=user_data)\n                # await self.delete_previous_question(event)\n                image_path = ImageDirectory.car_power\n                with open(image_path, \"rb\") as image:\n                    self.m = await event.answer_photo(image,\n                                             caption=\"Отлично! Укажите мощность двигателя автомобиля от 50 до 1000 (л.с.). (напишите)\")\n                # self.m = await event.answer(\"Отлично! Укажите мощность двигателя автомобиля от 50 до 1000 (л.с.). (напишите)\")\n                await state.set_state(User.STATE_CAR_POWER)\n        except ValueError:\n            # Если не удалось преобразовать введенный текст в число\n            self.m = await event.answer(\n                \"Пожалуйста, корректный объем двигателя (в пределах от 0.2 до 10.0 литров) через точку или целым числом(!).\")\n            await state.set_state(User.STATE_CAR_ENGINE_VOLUME)\n\n    async def get_car_power(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        if await validate_car_power(event.text):\n            user_data[\"car_power\"] = event.text\n            keyboard = create_keyboard(dict_car_transmission_types)\n\n            await state.update_data(user_data=user_data)\n            # await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_transmission_type\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Отлично! Какой тип коробки передач используется в автомобиле?\", reply_markup=keyboard)\n            # await event.answer(\"Отлично! Какой тип коробки передач используется в автомобиле?\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_TRANSMISSION_TYPE)\n        else:\n            # await self.delete_previous_question(event)\n            self.m = await event.answer(\"Пожалуйста, введите корректную мощность двигателя (в пределах от 50 до 1000 л.с.).\")\n            await state.set_state(User.STATE_CAR_POWER)\n\n    async def get_car_transmission_type(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        if await validate_button_input(event.text, dict_car_transmission_types):\n            user_data[\"car_transmission_type\"] = event.text\n            keyboard = create_keyboard(dict_car_colors)\n            await state.update_data(user_data=user_data)\n            # await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_color\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Какого цвета автомобиль?\", reply_markup=keyboard)\n            # self.m = await event.answer(\"Какого цвета автомобиль?\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_COLOR)\n        else:\n            # await self.delete_previous_question(event)\n            keyboard = create_keyboard(dict_car_transmission_types)\n            self.m = await event.answer(\"Пожалуйста, выберите корректный тип трансмиссии.\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_TRANSMISSION_TYPE)\n\n    async def get_car_color(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        if await validate_button_input(event.text, dict_car_colors):\n            user_data[\"car_color\"] = event.text\n            keyboard = create_keyboard(dict_car_mileages)\n            await state.update_data(user_data=user_data)\n            # await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_mileage\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Каков пробег автомобиля(км.)? (если новый, выберите 'Новый')\", reply_markup=keyboard)\n            # self.m = await event.answer(\"Каков пробег автомобиля(км.)? (если новый, выберите 'Новый')\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_MILEAGE)\n        else:\n            # await self.delete_previous_question(event)\n            keyboard = create_keyboard(dict_car_colors)\n            self.m = await event.answer(\"Пожалуйста, выберите корректный цвет автомобиля.\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_COLOR)\n\n    async def get_car_mileage(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        if await validate_car_mileage(event.text):\n            user_data[\"car_mileage\"] = event.text\n            keyboard = create_keyboard(dict_car_document_statuses)\n            await state.update_data(user_data=user_data)\n            # await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_document_status\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Каков статус документов у автомобиля ?\", reply_markup=keyboard)\n            # self.m = await event.answer(\"Каков статус документов у автомобиля ?\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_DOCUMENT_STATUS)\n        else:\n            # await self.delete_previous_question(event)\n            keyboard = create_keyboard(dict_car_mileages)\n            self.m = await event.answer(\"Пожалуйста, введите корректное значение пробега.\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_MILEAGE)\n\n    async def get_car_document_status(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        if await validate_button_input(event.text, dict_car_document_statuses):\n\n            user_data[\"car_document_status\"] = event.text\n            keyboard = create_keyboard(dict_car_owners)\n            await state.update_data(user_data=user_data)\n            # await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_owners\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Сколько владельцев у автомобиля?\", reply_markup=keyboard)\n            # self.m = await event.answer(\"Сколько владельцев у автомобиля?\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_OWNERS)\n        else:\n#             await self.delete_previous_question(event)\n            keyboard = create_keyboard(dict_car_document_statuses)\n            self.m = await event.answer(\"Пожалуйста, выберите корректный статус документов автомобиля.\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_DOCUMENT_STATUS)\n\n    async def get_car_owners(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        if await validate_button_input(event.text, dict_car_owners):\n            user_data[\"car_owners\"] = event.text\n            keyboard = create_keyboard(dict_car_customs_cleared)\n            await state.update_data(user_data=user_data)\n#             await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_customs_cleared\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Растаможен ли автомобиль?\", reply_markup=keyboard)\n            # self.m = await event.answer(\"Растаможен ли автомобиль?\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_CUSTOMS_CLEARED)\n        else:\n#             await self.delete_previous_question(event)\n            keyboard = create_keyboard(dict_car_owners)\n            self.m = await event.answer(\"Пожалуйста, выберите корректное количество владельцев автомобиля.\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_OWNERS)\n\n    async def get_car_customs_cleared(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        if await validate_button_input(event.text, dict_car_customs_cleared):\n            user_data[\"car_customs_cleared\"] = event.text\n            keyboard = create_keyboard(dict_car_conditions)\n            await state.update_data(user_data=user_data)\n#             await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_condition\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Выберите состояние автомобиля:\", reply_markup=keyboard)\n            # self.m = await event.answer(\"Выберите состояние автомобиля:\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_CONDITION)\n        else:\n#             await self.delete_previous_question(event)\n            keyboard = create_keyboard(dict_car_customs_cleared)\n            self.m = await event.answer(\"Пожалуйста, выберите корректный статус растаможки автомобиля.\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_CUSTOMS_CLEARED)\n\n    async def get_car_condition(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        if await validate_button_input(event.text, dict_car_conditions):\n            user_data[\"car_condition\"] = event.text\n            await state.update_data(user_data=user_data)\n#             await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_description\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Описание автомобиля. (напишите)\")\n            # self.m = await event.answer(\"Описание автомобиля. (напишите)\")\n            await state.set_state(User.STATE_CAR_DESCRIPTION)\n        else:\n#             await self.delete_previous_question(event)\n            keyboard = create_keyboard(dict_car_conditions)\n            self.m = await event.answer(\"Пожалуйста, выберите корректное состояние автомобиля.\", reply_markup=keyboard)\n            await state.set_state(User.STATE_CAR_CONDITION)\n\n    async def get_car_description(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n\n        if await validate_length_text(event):\n            if await validate_car_description(event.text):\n                user_data[\"car_description\"] = event.text\n                keyboard = create_keyboard(dict_currency)\n                await state.update_data(user_data=user_data)\n    #             await self.delete_previous_question(event)\n                image_path = ImageDirectory.car_currency\n                with open(image_path, \"rb\") as image:\n                    self.m = await event.answer_photo(image, caption=\"Выберите валюту:\", reply_markup=keyboard)\n                # self.m = await event.answer(\"Выберите валюту:\", reply_markup=keyboard)\n                await state.set_state(User.STATE_SELECT_CURRENCY)\n            else:\n    #             await self.delete_previous_question(event)\n                self.m = await event.answer(\"Пожалуйста, введите корректное описание.\")\n                await state.set_state(User.STATE_CAR_DESCRIPTION)\n        else:\n            self.m = await event.answer(\"Ваше описание сильно большое. Напишите до ~500 символов:\")\n            await state.set_state(User.STATE_CAR_DESCRIPTION)\n\n    async def select_currency(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n        if await validate_button_input(event.text, dict_currency):\n            user_data[\"currency\"] = event.text\n            await state.update_data(user_data=user_data)\n#             await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_price\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Цена автомобиля?\")\n            # self.m = await event.answer(\"Цена автомобиля?\")\n            await state.set_state(User.STATE_CAR_PRICE)\n        else:\n#             await self.delete_previous_question(event)\n            keyboard = create_keyboard(dict_currency)\n            self.m = await event.answer(\"Пожалуйста, выберите корректную валюту.\", reply_markup=keyboard)\n            await state.set_state(User.STATE_SELECT_CURRENCY)\n\n    async def get_car_price(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n\n        if await validate_car_price(event.text):\n            user_data[\"car_price\"] = event.text\n            await state.update_data(user_data=user_data)\n            # await self.delete_previous_question(event)\n            image_path = ImageDirectory.car_location\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Прекрасно! Где находится автомобиль? Город/пункт. (напишите)\")\n            # self.m = await event.answer(\"Прекрасно! Где находится автомобиль? Город/пункт. (напишите)\")\n            await state.set_state(User.STATE_CAR_LOCATION)\n        else:\n#             await self.delete_previous_question(event)\n            self.m = await event.answer(\"Пожалуйста, введите корректную цену.\")\n            await state.set_state(User.STATE_CAR_PRICE)\n\n    async def get_car_location(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n\n        if await validate_car_location(event.text):\n            user_data[\"car_location\"] = event.text\n            await state.update_data(user_data=user_data)\n#             await self.delete_previous_question(event)\n            image_path = ImageDirectory.seller_name\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Прекрасно! Укажите имя продавца. (напишите)\")\n            # self.m = await event.answer(\"Прекрасно! Укажите имя продавца. (напишите)\")\n            await state.set_state(User.STATE_SELLER_NAME)\n        else:\n#             await self.delete_previous_question(event)\n            self.m = await event.answer(\"Пожалуйста, введите корректные данные.\")\n            await state.set_state(User.STATE_CAR_LOCATION)\n\n    async def get_seller_name(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n\n        if await validate_name(event.text) is True:\n            user_data[\"seller_name\"] = event.text\n            await state.update_data(user_data=user_data)\n#             await self.delete_previous_question(event)\n            image_path = ImageDirectory.seller_phone\n            with open(image_path, \"rb\") as image:\n                self.m = await event.answer_photo(image, caption=\"Отлично! Какой телефонный номер у продавца? (напишите в формате +7XXXNNNXXNN или 8XXXNNNXXNN)\")\n            # self.m = await event.answer(\"Отлично! Какой телефонный номер у продавца? (напишите в формате +7XXXNNNXXNN)\")\n            await state.set_state(User.STATE_SELLER_PHONE)\n        else:\n#             await self.delete_previous_question(event)\n            self.m = await event.answer(\"Пожалуйста, введите корректное имя.\")\n            await state.set_state(User.STATE_SELLER_NAME)\n\n    async def get_seller_phone(self, event, state):\n\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        # await self.m.delete()\n\n        if await validate_phone_number(event.text) is True:\n            event.text = '+7' + event.text[1:] if event.text.startswith('8') else event.text\n            user_data[\"seller_phone\"] = event.text\n            await state.update_data(user_data=user_data)\n            print(user_data)\n            print(await validate_final_length(event, state, user_data))\n            if await validate_final_length(event, state, user_data):\n                print(validate_final_length)\n    #             await self.delete_previous_question(event)\n                image_path = ImageDirectory.car_photos\n                with open(image_path, \"rb\") as image:\n                    self.m = await event.answer_photo(image, caption=\"Добавьте фотографии авто до 10 штук (За один раз!)\")\n                # self.m = await event.answer(\"Добавьте фотографии авто\")\n                await state.set_state(User.STATE_CAR_PHOTO)\n            else:\n                await event.reply(f\"Ваше сообщение получилось сильно большим! \\nПерезагрузите бота и напишите объявление заново.\")\n\n        else:\n#             await self.delete_previous_question(event)\n            self.m = await event.answer(\"Пожалуйста, введите корректный номер в формате +7XXXNNNXXNN.\")\n            await state.set_state(User.STATE_SELLER_PHONE)\n    # async def write_to_excel(self, event, user_data):\n    #     file_path = 'db.xlsx'\n    #\n    #     # Проверяем, существует ли файл Excel\n    #     if os.path.exists(file_path):\n    #         workbook = openpyxl.load_workbook(file_path)\n    #     else:\n    #         workbook = openpyxl.Workbook()\n    #\n    #     sheet = workbook.active\n    #\n    #     # Проверяем, нужно ли добавить заголовки\n    #     if sheet.max_row == 1:\n    #         headers = [\n    #             'Data', 'Car Brand-Model', 'Year', 'Mileage (km)', 'Transmission Type',\n    #             'Body Type', 'Engine Type', 'Engine Volume (L)', 'Power (hp)',\n    #             'Color', 'Document Status', 'Number of Owners', 'Customs Cleared',\n    #             'Condition', 'Additional Description', 'Price', 'Currency',\n    #             'Location', 'Seller Name', 'Seller Phone', 'Telegram'\n    #         ]\n    #         sheet.append(headers)\n    #\n    #     row_data = [\n    #\n    #         user_data.get('user_data').get('car_brand', '') + '-' + user_data.get('user_data').get('car_model', ''),\n    #         user_data.get('user_data').get('car_year', ''),\n    #         user_data.get('user_data').get('car_mileage', ''),\n    #         user_data.get('user_data').get('car_transmission_type', ''),\n    #         user_data.get('user_data').get('car_body_type', ''),\n    #         user_data.get('user_data').get('car_engine_type', ''),\n    #         user_data.get('user_data').get('car_engine_volume', ''),\n    #         user_data.get('user_data').get('car_power', ''),\n    #         user_data.get('user_data').get('car_color', ''),\n    #         user_data.get('user_data').get('car_document_status', ''),\n    #         user_data.get('user_data').get('car_owners', ''),\n    #         'Да' if user_data.get('user_data').get('car_customs_cleared') else 'Нет',\n    #         user_data.get('user_data').get('car_condition', ''),\n    #         user_data.get('user_data').get('car_description', ''),\n    #         user_data.get('user_data').get('car_price', ''),\n    #         user_data.get('user_data').get('currency', ''),\n    #         user_data.get('user_data').get('car_location', ''),\n    #         user_data.get('user_data').get('seller_name', ''),\n    #         user_data.get('user_data').get('seller_phone', ''),\n    #         event.from_user.username if event.from_user.username is not None else 'по номеру телефона',\n    #     ]\n    #\n    #     sheet.append(row_data)\n    #\n    #     # Сохраняем файл\n    #     workbook.save(file_path)\n    async def handle_photos(self, event, state):\n        user_data = await state.get_data('user_data')\n        photo_id = event.photo[-1].file_id\n\n        caption = (\n            f\"\uD83D\uDEDE <b>#{user_data.get('user_data').get('car_brand')}-{user_data.get('user_data').get('car_model')}</b>\\n\\n\"\n            f\"   <b>-Год:</b> {user_data.get('user_data', {}).get('car_year')}\\n\"\n            f\"   <b>-Пробег (км.):</b> {user_data.get('user_data').get('car_mileage')}\\n\"\n            f\"   <b>-Тип КПП:</b> {user_data.get('user_data').get('car_transmission_type')}\\n\"\n            f\"   <b>-Кузов:</b> {user_data.get('user_data').get('car_body_type')}\\n\"\n            f\"   <b>-Тип двигателя:</b> {user_data.get('user_data').get('car_engine_type')}\\n\"\n            f\"   <b>-Объем двигателя (л.):</b> {user_data.get('user_data').get('car_engine_volume')}\\n\"\n            f\"   <b>-Мощность (л.с.):</b> {user_data.get('user_data').get('car_power')}\\n\"\n            f\"   <b>-Цвет:</b> {user_data.get('user_data').get('car_color')}\\n\"\n            f\"   <b>-Статус документов:</b> {user_data.get('user_data').get('car_document_status')}\\n\"\n            f\"   <b>-Количество владельцев:</b> {user_data.get('user_data').get('car_owners')}\\n\"\n            f\"   <b>-Растаможка:</b> {'Да' if user_data.get('user_data').get('car_customs_cleared') else 'Нет'}\\n\"\n            f\"   <b>-Состояние:</b> {user_data.get('user_data').get('car_condition')}\\n\\n\"\n            f\"ℹ\uFE0F<b>Дополнительная информация:</b> {user_data.get('user_data').get('car_description')}\\n\\n\"\n            f\"\uD83D\uDD25<b>Цена:</b> {user_data.get('user_data').get('car_price')} {user_data.get('user_data').get('currency')}\\n\\n\"\n            f\"\uD83D\uDCCD<b>Местоположение:</b> {user_data.get('user_data').get('car_location')}\\n\"\n            f\"\uD83D\uDC64<b>Продавец:</b> <span class='tg-spoiler'> {user_data.get('user_data').get('seller_name')} </span>\\n\"\n            f\"\uD83D\uDCF2<b>Телефон продавца:</b> <span class='tg-spoiler'>{user_data.get('user_data').get('seller_phone')} </span>\\n\"\n            f\"\uD83D\uDCAC<b>Телеграм:</b> <span class='tg-spoiler'>{event.from_user.username if event.from_user.username is not None else 'по номеру телефона'}</span>\\n\\n\"\n            f\"ООО 'Продвижение' Авто в ДНР (link: разместить авто)\"\n        )\n\n\n\n\n        print(user_data)\n        print(len(caption))\n        photo_uuid = str(uuid.uuid4())\n\n        if \"sent_photos\" not in user_data:\n            user_data[\"sent_photos\"] = []\n\n        user_data[\"sent_photos\"].append(\n            {\"file_id\": photo_id, \"uuid\": photo_uuid})\n        buffered_photos.append(InputMediaPhoto(\n            media=photo_id, caption=caption, parse_mode=types.ParseMode.HTML))\n        # # await self.m.delete()\n        if len(buffered_photos) > 1:\n            for i in range(len(buffered_photos) - 1):\n                buffered_photos[i].caption = None\n            last_photo = buffered_photos[-1]\n            last_photo.caption = caption\n\n\n        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(\n            KeyboardButton(\"Следущий шаг\")\n        )\n\n\n\n        self.m = await event.answer(\"Фото добавлено\", reply_markup=keyboard)\n\n        self.db_fix = user_data\n        await state.finish()\n\n\n    async def add_data_to_excel(self, event):\n        file_path = 'db.xlsx'\n\n        row_data = [\n            datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),\n            self.db_fix.get('user_data').get('car_brand', ''),\n            self.db_fix.get('user_data').get('car_model', ''),\n            self.db_fix.get('user_data').get('car_year', ''),\n            self.db_fix.get('user_data').get('car_mileage', ''),\n            self.db_fix.get('user_data').get('car_transmission_type', ''),\n            self.db_fix.get('user_data').get('car_body_type', ''),\n            self.db_fix.get('user_data').get('car_engine_type', ''),\n            self.db_fix.get('user_data').get('car_engine_volume', ''),\n            self.db_fix.get('user_data').get('car_power', ''),\n            self.db_fix.get('user_data').get('car_color', ''),\n            self.db_fix.get('user_data').get('car_document_status', ''),\n            self.db_fix.get('user_data').get('car_owners', ''),\n            self.db_fix.get('user_data').get('car_customs_cleared'),\n            self.db_fix.get('user_data').get('car_condition', ''),\n            self.db_fix.get('user_data').get('car_description', ''),\n            self.db_fix.get('user_data').get('car_price', ''),\n            self.db_fix.get('user_data').get('currency', ''),\n            self.db_fix.get('user_data').get('car_location', ''),\n            self.db_fix.get('user_data').get('seller_name', ''),\n            self.db_fix.get('user_data').get('seller_phone', ''),\n            event.from_user.username if event.from_user.username is not None else 'по номеру телефона',\n        ]\n\n        # Проверяем, существует ли файл Excel\n        if os.path.exists(file_path):\n            workbook = openpyxl.load_workbook(file_path)\n        else:\n            workbook = openpyxl.Workbook()\n        sheet = workbook.active\n\n        # Проверяем, нужно ли добавить заголовки\n        if sheet.max_row == 1:\n            headers = [\n                'Дата', 'Бренд', 'Модель', 'Год', 'Пробег (км)', 'Тип трансмиссии',\n                'Тип кузова', 'Тип двигателя', 'Объем двигателя (л)', 'Мощность (л.с.)',\n                'Цвет', 'Статус документа', 'Количество владельцев', 'Растаможен',\n                'Состояние', 'Дополнительное описание', 'Цена', 'Валюта',\n                'Местоположение', 'Имя продавца', 'Телефон продавца', 'Телеграм'\n            ]\n            sheet.append(headers)\n\n        sheet.append(row_data)\n        workbook.save(file_path)\n\n    async def preview_advertisement(self, event):\n        await bot.send_media_group(chat_id=event.chat.id, media=buffered_photos, disable_notification=True)\n\n        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(\n            KeyboardButton(\"Отправить в канал\"),\n            KeyboardButton(\"Отменить и заполнить заново\"),\n        )\n        await event.reply(\"Так будет выглядеть ваше объявление. Вы можете либо разместить либо отменить и заполнить заново.\", reply_markup=keyboard)\n\n    async def send_advertisement(self, event):\n        # user_id = event.from_user.id\n        # await self.m.delete()\n        async with lock:\n            user_id = event.from_user.id\n            await self.add_data_to_excel(event)\n            await bot.send_media_group(chat_id=CHANNEL_ID, media=buffered_photos, disable_notification=True)\n            keyboard = create_keyboard(['Добавить ещё объявление', 'Ускорить продажу'])\n            await bot.send_message(user_id, \"Объявление отправлено в канал!\", reply_markup=keyboard)\n\n            buffered_photos.clear()\n\n\n    async def fill_again(self, event, state):\n        keyboard = create_keyboard(list(dict_car_brands_and_models.keys()))\n        image_path = ImageDirectory.car_brand # Путь к вашему изображению\n        with open(image_path, \"rb\") as image:\n            self.m = await event.answer_photo(image, caption=\"Выберите бренд автомобиля:\", reply_markup=keyboard)\n        # self.m = await event.answer(\"Выберите бренд автомобиля:\", reply_markup=keyboard)\n        async with lock:\n            buffered_photos.clear()\n        await state.set_state(User.STATE_CAR_BRAND)\n\n\ncar_bot = CarBotHandler()\nbot = Bot(token=API_TOKEN)\ndp = Dispatcher(bot, storage=MemoryStorage())\nlock = asyncio.Lock()\nbuffered_photos = []\n\n\n@dp.message_handler(lambda message: message.text == \"Добавить ещё объявление\", commands=['restart'], state='*')\nasync def cmd_restart(event: types.Message, state: FSMContext):\n    await car_bot.restart(event, state)\n\n@dp.message_handler(commands=[\"start\"])\nasync def cmd_start(event: types.Message, state: FSMContext):\n    await car_bot.start(event, state)\n\n#support\n@dp.message_handler(commands=['support'], state='*')\nasync def cmd_support(event: types.Message, state: FSMContext):\n    await car_bot.support(event, state)\n\n@dp.message_handler(state=User.STATE_SUPPORT_VALIDATION)\nasync def support_validation(event: types.Message, state: FSMContext):\n    await car_bot.support_validation(event, state)\n\n@dp.message_handler(state=User.STATE_SUPPORT_MESSAGE)\nasync def support_message(event: types.Message, state: FSMContext):\n    await car_bot.support_message(event, state)\n\n@dp.message_handler(state=User.STATE_SUPPORT_END)\nasync def support_end(event: types.Message, state: FSMContext):\n    await car_bot.restart(event, state)\n\n\n# end support\n\n\n\n@dp.message_handler(state=User.STATE_CAR_BRAND)\nasync def process_brand_selection(event: types.Message, state: FSMContext):\n    await car_bot.get_car_brand(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_MODEL)\nasync def process_model(event: types.Message, state: FSMContext):\n    await car_bot.get_car_model(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_YEAR)\nasync def get_car_year_handler(event: types.Message, state: FSMContext):\n    await car_bot.get_car_year(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_BODY_TYPE)\nasync def get_car_body_type(event: types.Message, state: FSMContext):\n    await car_bot.get_car_body_type(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_ENGINE_TYPE)\nasync def get_car_engine_type(event: types.Message, state: FSMContext):\n    await car_bot.get_car_engine_type(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_ENGINE_VOLUME)\nasync def get_car_engine_volume(event: types.Message, state: FSMContext):\n    await car_bot.get_car_engine_volume(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_POWER)\nasync def get_car_power(event: types.Message, state: FSMContext):\n    await car_bot.get_car_power(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_TRANSMISSION_TYPE)\nasync def get_car_transmission_type(event: types.Message, state: FSMContext):\n    await car_bot.get_car_transmission_type(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_COLOR)\nasync def get_car_color(event: types.Message, state: FSMContext):\n    await car_bot.get_car_color(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_MILEAGE)\nasync def get_car_mileage(event: types.Message, state: FSMContext):\n    await car_bot.get_car_mileage(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_DOCUMENT_STATUS)\nasync def get_car_document_status(event: types.Message, state: FSMContext):\n    await car_bot.get_car_document_status(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_OWNERS)\nasync def get_car_owners(event: types.Message, state: FSMContext):\n    await car_bot.get_car_owners(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_CUSTOMS_CLEARED)\nasync def get_car_customs_cleared(event: types.Message, state: FSMContext):\n    await car_bot.get_car_customs_cleared(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_CONDITION)\nasync def get_car_condition(event: types.Message, state: FSMContext):\n    await car_bot.get_car_condition(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_DESCRIPTION)\nasync def get_car_description(event: types.Message, state: FSMContext):\n    await car_bot.get_car_description(event, state)\n\n\n@dp.message_handler(state=User.STATE_SELECT_CURRENCY)\nasync def select_currency(event: types.Message, state: FSMContext):\n    await car_bot.select_currency(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_PRICE)\nasync def get_car_price(event: types.Message, state: FSMContext):\n    await car_bot.get_car_price(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_LOCATION)\nasync def get_car_location_handler(event: types.Message, state: FSMContext):\n    await car_bot.get_car_location(event, state)\n\n\n@dp.message_handler(state=User.STATE_SELLER_NAME)\nasync def get_seller_name_handler(event: types.Message, state: FSMContext):\n    await car_bot.get_seller_name(event, state)\n\n\n@dp.message_handler(state=User.STATE_SELLER_PHONE)\nasync def get_seller_phone_handler(event: types.Message, state: FSMContext):\n    await car_bot.get_seller_phone(event, state)\n\n\n@dp.message_handler(state=User.STATE_CAR_PHOTO, content_types=['photo'])\nasync def handle_photos(event: types.Message, state: FSMContext):\n    print('STATE:', state, event)\n    await car_bot.handle_photos(event, state)\n\n\n@dp.message_handler(lambda message: message.text == \"Следущий шаг\")\nasync def preview_advertisement(event: types.Message):\n    await car_bot.preview_advertisement(event)\n\n\n@dp.message_handler(lambda message: message.text == \"Отправить в канал\")\nasync def send_advertisement(event: types.Message, state: FSMContext):\n    await car_bot.send_advertisement(event)\n\n@dp.message_handler(lambda message: message.text == \"Отменить и заполнить заново\")\nasync def fill_again(event: types.Message, state: FSMContext):\n    await car_bot.fill_again(event, state)\n\n\n\n\n\n# старт бота\nif __name__ == '__main__':\n    executor.start_polling(dp, skip_updates=True)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bot v8.5.py b/bot v8.5.py
--- a/bot v8.5.py	(revision c5c51053d5e4ebb3e2d4be1c27e1559a233a915b)
+++ b/bot v8.5.py	(date 1707736050517)
@@ -530,56 +530,7 @@
 #             await self.delete_previous_question(event)
             self.m = await event.answer("Пожалуйста, введите корректный номер в формате +7XXXNNNXXNN.")
             await state.set_state(User.STATE_SELLER_PHONE)
-    # async def write_to_excel(self, event, user_data):
-    #     file_path = 'db.xlsx'
-    #
-    #     # Проверяем, существует ли файл Excel
-    #     if os.path.exists(file_path):
-    #         workbook = openpyxl.load_workbook(file_path)
-    #     else:
-    #         workbook = openpyxl.Workbook()
-    #
-    #     sheet = workbook.active
-    #
-    #     # Проверяем, нужно ли добавить заголовки
-    #     if sheet.max_row == 1:
-    #         headers = [
-    #             'Data', 'Car Brand-Model', 'Year', 'Mileage (km)', 'Transmission Type',
-    #             'Body Type', 'Engine Type', 'Engine Volume (L)', 'Power (hp)',
-    #             'Color', 'Document Status', 'Number of Owners', 'Customs Cleared',
-    #             'Condition', 'Additional Description', 'Price', 'Currency',
-    #             'Location', 'Seller Name', 'Seller Phone', 'Telegram'
-    #         ]
-    #         sheet.append(headers)
-    #
-    #     row_data = [
-    #
-    #         user_data.get('user_data').get('car_brand', '') + '-' + user_data.get('user_data').get('car_model', ''),
-    #         user_data.get('user_data').get('car_year', ''),
-    #         user_data.get('user_data').get('car_mileage', ''),
-    #         user_data.get('user_data').get('car_transmission_type', ''),
-    #         user_data.get('user_data').get('car_body_type', ''),
-    #         user_data.get('user_data').get('car_engine_type', ''),
-    #         user_data.get('user_data').get('car_engine_volume', ''),
-    #         user_data.get('user_data').get('car_power', ''),
-    #         user_data.get('user_data').get('car_color', ''),
-    #         user_data.get('user_data').get('car_document_status', ''),
-    #         user_data.get('user_data').get('car_owners', ''),
-    #         'Да' if user_data.get('user_data').get('car_customs_cleared') else 'Нет',
-    #         user_data.get('user_data').get('car_condition', ''),
-    #         user_data.get('user_data').get('car_description', ''),
-    #         user_data.get('user_data').get('car_price', ''),
-    #         user_data.get('user_data').get('currency', ''),
-    #         user_data.get('user_data').get('car_location', ''),
-    #         user_data.get('user_data').get('seller_name', ''),
-    #         user_data.get('user_data').get('seller_phone', ''),
-    #         event.from_user.username if event.from_user.username is not None else 'по номеру телефона',
-    #     ]
-    #
-    #     sheet.append(row_data)
-    #
-    #     # Сохраняем файл
-    #     workbook.save(file_path)
+
     async def handle_photos(self, event, state):
         user_data = await state.get_data('user_data')
         photo_id = event.photo[-1].file_id
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"22f3e2f5-e859-4be0-8c84-7d48babb7cbd\" name=\"Changes\" comment=\"v.8.5.0 - Beta\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/bot v8.5.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/bot v8.5.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Merge.Settings\">\n    <option name=\"BRANCH\" value=\"origin/forkN\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"dev\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"HighlightingSettingsPerFile\">\n    <setting file=\"file://$PROJECT_DIR$/use not/caption.py\" root0=\"SKIP_INSPECTION\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\n  <component name=\"ProjectId\" id=\"2ZnmbA3W6EYiEE67yucMxrBafle\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;Python.bot v8.3.executor&quot;: &quot;Run&quot;,\n    &quot;Python.bot v8.4.executor&quot;: &quot;Run&quot;,\n    &quot;Python.bot v8.5.executor&quot;: &quot;Run&quot;,\n    &quot;Python.config.executor&quot;: &quot;Run&quot;,\n    &quot;Python.short_code_test.executor&quot;: &quot;Run&quot;,\n    &quot;Python.short_code_test2.executor&quot;: &quot;Run&quot;,\n    &quot;Python.validation.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;WebServerToolWindowFactoryState&quot;: &quot;false&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;Rebasing forkN&quot;,\n    &quot;last_opened_file_path&quot;: &quot;/home/dev/Development/AdTgBot&quot;,\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;\n  },\n  &quot;keyToStringList&quot;: {\n    &quot;com.intellij.ide.scratch.ScratchImplUtil$2/New Scratch File&quot;: [\n      &quot;Python&quot;,\n      &quot;PLAIN_TEXT&quot;\n    ]\n  }\n}</component>\n  <component name=\"RecentsManager\">\n    <key name=\"CopyFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$\" />\n      <recent name=\"C:\\Users\\Дмитрий\\Desktop\\Code Projects\\AdTgBot\" />\n      <recent name=\"C:\\Users\\Дмитрий\\AppData\\Roaming\\JetBrains\\PyCharm2022.2\\scratches\\TgAutoBot - Scratches\" />\n    </key>\n    <key name=\"MoveFile.RECENT_KEYS\">\n      <recent name=\"$PROJECT_DIR$\" />\n    </key>\n  </component>\n  <component name=\"RunManager\" selected=\"Python.bot v8.5\">\n    <configuration name=\"bot v8.5\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"AdTgBot\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/bot v8.5.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"config\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"AdTgBot\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/config.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\n      <module name=\"AdTgBot\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"short_code_test\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"AdTgBot\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/short_code_test.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"short_code_test2\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"AdTgBot\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/short_code_test2.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"validation\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"AdTgBot\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/validation.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.bot v8.5\" />\n        <item itemvalue=\"Python.short_code_test2\" />\n        <item itemvalue=\"Python.short_code_test\" />\n        <item itemvalue=\"Python.validation\" />\n        <item itemvalue=\"Python.config\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-python-sdk-5a2391486177-d3b881c8e49f-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-233.13763.11\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"22f3e2f5-e859-4be0-8c84-7d48babb7cbd\" name=\"Changes\" comment=\"\" />\n      <created>1703066285491</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1703066285491</updated>\n      <workItem from=\"1703066288395\" duration=\"632000\" />\n      <workItem from=\"1703140391622\" duration=\"678000\" />\n      <workItem from=\"1703143078808\" duration=\"26887000\" />\n      <workItem from=\"1703224913555\" duration=\"6019000\" />\n      <workItem from=\"1703231103818\" duration=\"17428000\" />\n      <workItem from=\"1703487316277\" duration=\"2937000\" />\n      <workItem from=\"1703506594730\" duration=\"597000\" />\n      <workItem from=\"1703571318603\" duration=\"16855000\" />\n      <workItem from=\"1703658042558\" duration=\"21374000\" />\n      <workItem from=\"1703766256617\" duration=\"27000\" />\n      <workItem from=\"1703774344150\" duration=\"17478000\" />\n      <workItem from=\"1703828520093\" duration=\"11301000\" />\n      <workItem from=\"1705299654305\" duration=\"2136000\" />\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"1.6\">\n      <created>1703595765616</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703595765616</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"1.7\">\n      <created>1703662475309</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703662475309</updated>\n    </task>\n    <task id=\"LOCAL-00003\" summary=\"1.7\">\n      <created>1703662942521</created>\n      <option name=\"number\" value=\"00003\" />\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703662942521</updated>\n    </task>\n    <task id=\"LOCAL-00004\" summary=\"1.8\">\n      <created>1703673088945</created>\n      <option name=\"number\" value=\"00004\" />\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703673088945</updated>\n    </task>\n    <task id=\"LOCAL-00005\" summary=\"1.9\">\n      <created>1703677323126</created>\n      <option name=\"number\" value=\"00005\" />\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703677323126</updated>\n    </task>\n    <task id=\"LOCAL-00006\" summary=\"1.9\">\n      <created>1703678028716</created>\n      <option name=\"number\" value=\"00006\" />\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703678028716</updated>\n    </task>\n    <task id=\"LOCAL-00007\" summary=\"v2.5\">\n      <created>1703745527352</created>\n      <option name=\"number\" value=\"00007\" />\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703745527352</updated>\n    </task>\n    <task id=\"LOCAL-00008\" summary=\"v.2.6\">\n      <created>1703762983358</created>\n      <option name=\"number\" value=\"00008\" />\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703762983358</updated>\n    </task>\n    <task id=\"LOCAL-00009\" summary=\"v.2.7\">\n      <created>1703797625310</created>\n      <option name=\"number\" value=\"00009\" />\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703797625310</updated>\n    </task>\n    <task id=\"LOCAL-00010\" summary=\"v.2.7\">\n      <created>1703797652177</created>\n      <option name=\"number\" value=\"00010\" />\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703797652177</updated>\n    </task>\n    <task id=\"LOCAL-00011\" summary=\"v.2.8\">\n      <created>1703833645234</created>\n      <option name=\"number\" value=\"00011\" />\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1703833645234</updated>\n    </task>\n    <task id=\"LOCAL-00012\" summary=\"v.3.0\">\n      <created>1704780673220</created>\n      <option name=\"number\" value=\"00012\" />\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1704780673220</updated>\n    </task>\n    <task id=\"LOCAL-00013\" summary=\"v.3.1\">\n      <created>1704785199208</created>\n      <option name=\"number\" value=\"00013\" />\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1704785199208</updated>\n    </task>\n    <task id=\"LOCAL-00014\" summary=\"v3.5\">\n      <created>1704798659485</created>\n      <option name=\"number\" value=\"00014\" />\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1704798659485</updated>\n    </task>\n    <task id=\"LOCAL-00015\" summary=\"v3.6\">\n      <created>1704803012623</created>\n      <option name=\"number\" value=\"00015\" />\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1704803012623</updated>\n    </task>\n    <task id=\"LOCAL-00016\" summary=\"v.4.6\">\n      <created>1705056105359</created>\n      <option name=\"number\" value=\"00016\" />\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705056105359</updated>\n    </task>\n    <task id=\"LOCAL-00017\" summary=\"v.4.6\">\n      <created>1705056303282</created>\n      <option name=\"number\" value=\"00017\" />\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705056303282</updated>\n    </task>\n    <task id=\"LOCAL-00018\" summary=\"v.4.7\">\n      <created>1705062400728</created>\n      <option name=\"number\" value=\"00018\" />\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705062400728</updated>\n    </task>\n    <task id=\"LOCAL-00019\" summary=\"v.7.2\">\n      <created>1705487079062</created>\n      <option name=\"number\" value=\"00019\" />\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705487079063</updated>\n    </task>\n    <task id=\"LOCAL-00020\" summary=\"v.7.3\">\n      <created>1705494005692</created>\n      <option name=\"number\" value=\"00020\" />\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705494005692</updated>\n    </task>\n    <task id=\"LOCAL-00021\" summary=\"v.7.3\">\n      <created>1705494030674</created>\n      <option name=\"number\" value=\"00021\" />\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1705494030674</updated>\n    </task>\n    <task id=\"LOCAL-00022\" summary=\"v.8.3.5. - hz\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706704287867</created>\n      <option name=\"number\" value=\"00022\" />\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706704287867</updated>\n    </task>\n    <task id=\"LOCAL-00023\" summary=\"v.8.3.5. - fix git ignore\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706704473707</created>\n      <option name=\"number\" value=\"00023\" />\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706704473707</updated>\n    </task>\n    <task id=\"LOCAL-00024\" summary=\"v.8.3.6. - fix states and engine volume bug\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706788261928</created>\n      <option name=\"number\" value=\"00024\" />\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706788261928</updated>\n    </task>\n    <task id=\"LOCAL-00025\" summary=\"v.8.3.6. - fix states and engine volume bug\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706791695918</created>\n      <option name=\"number\" value=\"00025\" />\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706791695918</updated>\n    </task>\n    <task id=\"LOCAL-00026\" summary=\"v.8.3.7. - fix states, event and delete message\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706861559284</created>\n      <option name=\"number\" value=\"00026\" />\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706861559284</updated>\n    </task>\n    <task id=\"LOCAL-00027\" summary=\"v.8.3.8. - final\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706863896815</created>\n      <option name=\"number\" value=\"00027\" />\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706863896815</updated>\n    </task>\n    <task id=\"LOCAL-00028\" summary=\"v.8.3.9. - fix message bug\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706865703125</created>\n      <option name=\"number\" value=\"00028\" />\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706865703125</updated>\n    </task>\n    <task id=\"LOCAL-00029\" summary=\"v.8.4.0, Data Base\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706868520963</created>\n      <option name=\"number\" value=\"00029\" />\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706868520963</updated>\n    </task>\n    <task id=\"LOCAL-00030\" summary=\"v.8.4.1, Data Base fucking\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1706877213846</created>\n      <option name=\"number\" value=\"00030\" />\n      <option name=\"presentableId\" value=\"LOCAL-00030\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1706877213846</updated>\n    </task>\n    <task id=\"LOCAL-00031\" summary=\"v.8.4.2, fix bug engine_volume validation\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707116856507</created>\n      <option name=\"number\" value=\"00031\" />\n      <option name=\"presentableId\" value=\"LOCAL-00031\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707116856507</updated>\n    </task>\n    <task id=\"LOCAL-00032\" summary=\"v.8.4.3, number starts with +7\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707127641885</created>\n      <option name=\"number\" value=\"00032\" />\n      <option name=\"presentableId\" value=\"LOCAL-00032\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707127641885</updated>\n    </task>\n    <task id=\"LOCAL-00033\" summary=\"v.8.4.4. - support partly\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707221294646</created>\n      <option name=\"number\" value=\"00033\" />\n      <option name=\"presentableId\" value=\"LOCAL-00033\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707221294646</updated>\n    </task>\n    <task id=\"LOCAL-00034\" summary=\"v.8.4.4. - support partly\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707223262877</created>\n      <option name=\"number\" value=\"00034\" />\n      <option name=\"presentableId\" value=\"LOCAL-00034\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707223262877</updated>\n    </task>\n    <task id=\"LOCAL-00035\" summary=\"v.8.4.5. - support FULL\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707297732387</created>\n      <option name=\"number\" value=\"00035\" />\n      <option name=\"presentableId\" value=\"LOCAL-00035\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707297732387</updated>\n    </task>\n    <task id=\"LOCAL-00036\" summary=\"v.8.4.5. - support FULL\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707297871817</created>\n      <option name=\"number\" value=\"00036\" />\n      <option name=\"presentableId\" value=\"LOCAL-00036\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707297871817</updated>\n    </task>\n    <task id=\"LOCAL-00037\" summary=\"v.8.4.5. - support FULL\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707301218925</created>\n      <option name=\"number\" value=\"00037\" />\n      <option name=\"presentableId\" value=\"LOCAL-00037\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707301218925</updated>\n    </task>\n    <task id=\"LOCAL-00038\" summary=\"v.8.4.5. - support FULL\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707301355214</created>\n      <option name=\"number\" value=\"00038\" />\n      <option name=\"presentableId\" value=\"LOCAL-00038\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707301355214</updated>\n    </task>\n    <task id=\"LOCAL-00039\" summary=\"v.8.4.6. - support capcha fix\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707302750953</created>\n      <option name=\"number\" value=\"00039\" />\n      <option name=\"presentableId\" value=\"LOCAL-00039\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707302750953</updated>\n    </task>\n    <task id=\"LOCAL-00040\" summary=\"v.8.4.7. - validation\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707310391849</created>\n      <option name=\"number\" value=\"00040\" />\n      <option name=\"presentableId\" value=\"LOCAL-00040\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707310391849</updated>\n    </task>\n    <task id=\"LOCAL-00041\" summary=\"v.8.4.7. - validation full\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707388986612</created>\n      <option name=\"number\" value=\"00041\" />\n      <option name=\"presentableId\" value=\"LOCAL-00041\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707388986612</updated>\n    </task>\n    <task id=\"LOCAL-00042\" summary=\"v.8.4.8. - validation full\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707396003250</created>\n      <option name=\"number\" value=\"00042\" />\n      <option name=\"presentableId\" value=\"LOCAL-00042\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707396003250</updated>\n    </task>\n    <task id=\"LOCAL-00043\" summary=\"v.8.4.9. - db test2\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707467204835</created>\n      <option name=\"number\" value=\"00043\" />\n      <option name=\"presentableId\" value=\"LOCAL-00043\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707467204835</updated>\n    </task>\n    <task id=\"LOCAL-00044\" summary=\"v.8.5.0 - Beta\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707473586186</created>\n      <option name=\"number\" value=\"00044\" />\n      <option name=\"presentableId\" value=\"LOCAL-00044\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707473586186</updated>\n    </task>\n    <task id=\"LOCAL-00045\" summary=\"v.8.5.0 - Beta\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707473602816</created>\n      <option name=\"number\" value=\"00045\" />\n      <option name=\"presentableId\" value=\"LOCAL-00045\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707473602816</updated>\n    </task>\n    <task id=\"LOCAL-00046\" summary=\"v.8.5.0 - Beta\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707479406724</created>\n      <option name=\"number\" value=\"00046\" />\n      <option name=\"presentableId\" value=\"LOCAL-00046\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707479406724</updated>\n    </task>\n    <task id=\"LOCAL-00047\" summary=\"v.8.5.0 - Beta\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707480295817</created>\n      <option name=\"number\" value=\"00047\" />\n      <option name=\"presentableId\" value=\"LOCAL-00047\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707480295817</updated>\n    </task>\n    <task id=\"LOCAL-00048\" summary=\"v.8.5.0 - Beta\">\n      <option name=\"closed\" value=\"true\" />\n      <created>1707481207329</created>\n      <option name=\"number\" value=\"00048\" />\n      <option name=\"presentableId\" value=\"LOCAL-00048\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1707481207329</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"49\" />\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <MESSAGE value=\"v.3.1\" />\n    <MESSAGE value=\"v3.5\" />\n    <MESSAGE value=\"v3.6\" />\n    <MESSAGE value=\"v.4.6\" />\n    <MESSAGE value=\"v.4.7\" />\n    <MESSAGE value=\"v.7.2\" />\n    <MESSAGE value=\"v.7.3\" />\n    <MESSAGE value=\"v.8.3.5. - hz\" />\n    <MESSAGE value=\"v.8.3.5. - fix git ignore\" />\n    <MESSAGE value=\"v.8.3.6. - fix states and engine volume bug\" />\n    <MESSAGE value=\"v.8.3.7. - fix states, event and delete message\" />\n    <MESSAGE value=\"v.8.3.8. - final\" />\n    <MESSAGE value=\"v.8.3.9. - fix message bug\" />\n    <MESSAGE value=\"v.8.4.0, Data Base\" />\n    <MESSAGE value=\"v.8.4.1, Data Base fucking\" />\n    <MESSAGE value=\"v.8.4.2, fix bug engine_volume validation\" />\n    <MESSAGE value=\"v.8.4.3, number starts with +7\" />\n    <MESSAGE value=\"v.8.4.4. - support partly\" />\n    <MESSAGE value=\"v.8.4.5. - support FULL\" />\n    <MESSAGE value=\"v.8.4.6. - support capcha fix\" />\n    <MESSAGE value=\"v.8.4.7. - validation\" />\n    <MESSAGE value=\"v.8.4.7. - validation full\" />\n    <MESSAGE value=\"v.8.4.8. - validation full\" />\n    <MESSAGE value=\"v.8.4.9. - db test2\" />\n    <MESSAGE value=\"v.8.5.0 - Beta\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"v.8.5.0 - Beta\" />\n  </component>\n  <component name=\"XDebuggerManager\">\n    <breakpoint-manager>\n      <breakpoints>\n        <line-breakpoint enabled=\"true\" suspend=\"THREAD\" type=\"python-line\">\n          <url>file://$PROJECT_DIR$/main.py</url>\n          <line>392</line>\n          <option name=\"timeStamp\" value=\"1\" />\n        </line-breakpoint>\n      </breakpoints>\n    </breakpoint-manager>\n    <watches-manager>\n      <configuration name=\"PythonConfigurationType\">\n        <watch expression=\"event\" />\n        <watch expression=\"event\" language=\"Python\" />\n      </configuration>\n    </watches-manager>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c5c51053d5e4ebb3e2d4be1c27e1559a233a915b)
+++ b/.idea/workspace.xml	(date 1707736594928)
@@ -4,7 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="22f3e2f5-e859-4be0-8c84-7d48babb7cbd" name="Changes" comment="v.8.5.0 - Beta">
+    <list default="true" id="22f3e2f5-e859-4be0-8c84-7d48babb7cbd" name="Changes" comment="v.8.5.1. - Beta">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/bot v8.5.py" beforeDir="false" afterPath="$PROJECT_DIR$/bot v8.5.py" afterDir="false" />
     </list>
@@ -615,7 +615,15 @@
       <option name="project" value="LOCAL" />
       <updated>1707481207329</updated>
     </task>
-    <option name="localTasksCounter" value="49" />
+    <task id="LOCAL-00049" summary="v.8.5.1. - Beta">
+      <option name="closed" value="true" />
+      <created>1707726439249</created>
+      <option name="number" value="00049" />
+      <option name="presentableId" value="LOCAL-00049" />
+      <option name="project" value="LOCAL" />
+      <updated>1707726439249</updated>
+    </task>
+    <option name="localTasksCounter" value="50" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -633,7 +641,6 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="v.3.1" />
     <MESSAGE value="v3.5" />
     <MESSAGE value="v3.6" />
     <MESSAGE value="v.4.6" />
@@ -658,7 +665,8 @@
     <MESSAGE value="v.8.4.8. - validation full" />
     <MESSAGE value="v.8.4.9. - db test2" />
     <MESSAGE value="v.8.5.0 - Beta" />
-    <option name="LAST_COMMIT_MESSAGE" value="v.8.5.0 - Beta" />
+    <MESSAGE value="v.8.5.1. - Beta" />
+    <option name="LAST_COMMIT_MESSAGE" value="v.8.5.1. - Beta" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
