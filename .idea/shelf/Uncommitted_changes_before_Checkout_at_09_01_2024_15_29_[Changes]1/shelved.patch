Index: additional.py
===================================================================
diff --git a/additional.py b/additional.py
--- a/additional.py	
+++ b/additional.py	
@@ -376,6 +376,7 @@
 
 async def handle_model(message: types.Message):
     user_id = message.from_user.id
+
     user_data[user_id]['model'] = message.text
     await message.answer('Отправьте фотографии машины (от 1 до 10 штук)')
     await dp.register_next_step_handler(message, handle_photos)
@@ -421,6 +422,7 @@
         # Отправляем уведомление пользователю о успешной отправке
         await bot.send_message(user_id, "Фотографии отправлены в канал.")
 
+
 if __name__ == '__main__':
     from aiogram import executor
 
Index: Bot-V2.py
===================================================================
diff --git a/Bot-V2.py b/Bot-V2.py
--- a/Bot-V2.py	
+++ b/Bot-V2.py	
@@ -1,18 +1,11 @@
-import uuid
 from aiogram import Bot, Dispatcher, types
 from aiogram.dispatcher import FSMContext
 from aiogram.dispatcher.filters import Command
 from aiogram.contrib.fsm_storage.memory import MemoryStorage
-from aiogram.types import InputMediaPhoto
-from aiogram.types import InputMediaPhoto, PhotoSize
-import asyncio
-
-
-lock = asyncio.Lock()
 
 storage = MemoryStorage()
 
-API_TOKEN = '6803723279:AAGEujzpCZq3nMCidAt0MsZjBEMKkQUDw9M'
+API_TOKEN = '6087732169:AAHABX0K5LHguc-ymnd0Um8UOK8oucvX_gY'
 CHANNEL_ID = '@autoxyibot1'
 bot = Bot(token=API_TOKEN)
 dp = Dispatcher(bot, storage=storage)
@@ -31,13 +24,13 @@
 STATE_CAR_DOCUMENT_STATUS = 'state_car_document_status'
 STATE_CAR_OWNERS = 'state_car_owners'
 STATE_CAR_CUSTOMS_CLEARED = 'state_car_customs_cleared'
-STATE_CAR_PHOTOS = 'state_car_photos'
+STATE_CAR_PHOTO = 'state_car_photo'
 STATE_CAR_DESCRIPTION = 'state_car_description'
 STATE_CAR_PRICE = 'state_car_price'
 STATE_CAR_LOCATION = 'state_car_location'
 STATE_SELLER_NAME = 'state_seller_name'
 STATE_SELLER_PHONE = 'state_seller_phone'
-STATE_SEND = 'state_send'
+
 
 # Обработка команды /start
 @dp.message_handler(Command("start"))
@@ -48,14 +41,16 @@
     await event.answer("Напишите бренд автомобиля:")
     await state.set_state(STATE_CAR_BRAND)
 
+
 @dp.message_handler(state=STATE_CAR_BRAND)
 async def get_car_brand(event: types.Message, state: FSMContext):
     user_data = (await state.get_data()).get("user_data", {})
-    user_data["car_brand"] = event.text
+    user_data["Марка Машины"] = event.text
     await state.update_data(user_data=user_data)
     await event.answer("Хорошо! Укажите модель автомобиля:")
     await state.set_state(STATE_CAR_MODEL)
 
+
 @dp.message_handler(state=STATE_CAR_MODEL)
 async def get_car_model(event: types.Message, state: FSMContext):
     user_data = (await state.get_data()).get("user_data", {})
@@ -64,6 +59,7 @@
     await event.answer("Отлично! Какой год выпуска у автомобиля?:")
     await state.set_state(STATE_CAR_YEAR)
 
+
 @dp.message_handler(state=STATE_CAR_YEAR)
 async def get_car_year(event: types.Message, state: FSMContext):
     user_data = (await state.get_data()).get("user_data", {})
@@ -149,34 +145,17 @@
     user_data = (await state.get_data()).get("user_data", {})
     user_data["car_customs_cleared"] = event.text
     await state.update_data(user_data=user_data)
-    await event.answer("Добавьте фотографии автомобиля.")
-    await state.set_state(STATE_CAR_PHOTOS)
+    await event.answer("Приложите фотографии автомобиля.")
+    await state.set_state(STATE_CAR_PHOTO)
 
-@dp.message_handler(state=STATE_CAR_PHOTOS, content_types=['photo'])
-async def get_car_photos(event: types.Message, state: FSMContext):
-    user_data = (await state.get_data()).get("user_data", {})
-    if "car_photos" not in user_data:
-        user_data["car_photos"] = []
+@dp.message_handler(state=STATE_CAR_PHOTO)
+async def get_car_photo(event: types.Message, state: FSMContext):
     # Ваш код обработки фотографий, если необходим
-    user_id = event.from_user.id
-    photo_uuid = str(uuid.uuid4())
-    # Проверяем, отправляали ли уже фото с таким же уникльным идентификатором
-    if user_id not in dp.data:
-        dp.data[user_id] = {"sent_uuids": set(), "sent_photos": []}
-    if photo_uuid not in dp.data[user_id]["sent_uuids"]:
-        dp.data[user_id]["sent_uuids"].add(photo_uuid)
 
-        # Получаем идентификатор фотографии и описание
-        photo_id = event.photo[-1].file_id
-        width = event.photo[-1].width
-        caption = event.caption
-
-        unique_photos = [photo for photo in user_data["car_photos"] if photo.file_id != photo_id or photo.width < width]
-        user_data["car_photos"] = unique_photos
-        user_data["car_photos"].append(event.photo[-1])
-        dp.data[user_id]["sent_photos"].append({"file_id": photo_id, "caption": caption, "uuid": photo_uuid})
-    # user_data["car_photos"] = event.photo  # Здесь можно сохранить ссылку на фотографии или другую информацию о них
+    user_data = (await state.get_data()).get("user_data", {})
+    user_data["car_photo"] = "фото"  # Здесь можно сохранить ссылку на фотографии или другую информацию о них
     await state.update_data(user_data=user_data)
+
     await event.answer("Предоставьте описание автомобиля.")
     await state.set_state(STATE_CAR_DESCRIPTION)
 
@@ -204,6 +183,7 @@
     await event.answer("Прекрасно! Укажите имя продавца.")
     await state.set_state(STATE_SELLER_NAME)
 
+
 @dp.message_handler(state=STATE_SELLER_NAME)
 async def get_seller_name(event: types.Message, state: FSMContext):
     user_data = (await state.get_data()).get("user_data", {})
@@ -212,91 +192,26 @@
     await event.answer("Отлично! Какой телефонный номер у продавца?")
     await state.set_state(STATE_SELLER_PHONE)
 
+
 @dp.message_handler(state=STATE_SELLER_PHONE)
 async def get_seller_phone(event: types.Message, state: FSMContext):
     user_data = (await state.get_data()).get("user_data", {})
     user_data["seller_phone"] = event.text
     await state.update_data(user_data=user_data)
-    await event.answer("Отлично! Сейчас запостим фото!")
-    await state.set_state(STATE_SEND)
-    print(user_data)
-
-@dp.message_handler(state=STATE_SEND)
-async def send_data_to_channel(user_id):
-    if user_id in user_data[user_id] and "sent_photos" in user_data[user_id]:
-        photos = dp.data[user_id]["sent_photos"]
-        media_group = [InputMediaPhoto(media=photo["file_id"], caption=photo.get("caption", "")) for photo in photos]
-
-
-# @dp.message_handler(state=STATE_SEND)
-# async def send_photos_to_channel(user_id): # Функция отправляет группу фотографий в указанный канал (CHANNEL_ID)
-#     if user_id in dp.data and "sent_photos" in dp.data[user_id]:
-#         photos = dp.data[user_id]["sent_photos"]
-#         media_group = [InputMediaPhoto(media=photo["file_id"], caption=photo.get("caption", "")) for photo in photos]
-#
-#         # Отправляем медиагруппу в канал
-#         await bot.send_media_group(chat_id=CHANNEL_ID, media=media_group, caption=str(dp.data[user_id]))
-#
-#         # Очищаем список после отправки всех фотографий
-#         dp.data[user_id]["sent_photos"] = []
-#         dp.data[user_id]["sent_uuids"].clear()  # Очищаем множество уникальных идентификаторов
-#
-#         # Отправляем уведомление пользователю о успешной отправке
-#         await bot.send_message(user_id, "Фотографии отправлены в канал.")
-#         await send_photos_to_channel(user_id)
-#         message = "Получена новая заявка:\n"
-#         for key, value in user_data.items():
-#     #     message += f"{key.capitalize()}: {value}\n"
 
-@dp.message_handler(state=STATE_SEND)
-async def send_data_to_channel(user_id):
-    if user_id in user_data[user_id] and "sent_photos" in user_data[user_id]:
-        photos = dp.data[user_id]["sent_photos"]
-        media_group = [InputMediaPhoto(media=photo["file_id"], caption=photo.get("caption", "")) for photo in photos]
+    # Финальный шаг - собрать все данные и завершить состояние
+    final_data = await state.get_data()
+    user_data = final_data.get("user_data", {})
 
-if __name__ == '__main__':
-    from aiogram import executor
-    executor.start_polling(dp, skip_updates=True)
+    # Формируем сообщение с данными пользователя
+    message = "Получена новая заявка:\n"
+    for key, value in user_data.items():
+        message += f"{key.capitalize()}: {value}\n"
 
-# Попытка 1
-    # # Финальный шаг - собрать все данные и завершить состояние
-    # final_data = await state.get_data()
-    # user_data = final_data.get("user_data", {})
-    #
-    # # Формируем сообщение с данными пользователя
-    # message = "Получена новая заявка:\n"
-    # for key, value in user_data.items():
-    #     message += f"{key.capitalize()}: {value}\n"
-    # print(final_data)
-    # # Отправляем сообщение в канал
-    # await bot.send_message(CHANNEL_ID, message)
-    # await state.reset_state()
+    # Отправляем сообщение в канал
+    await bot.send_message(CHANNEL_ID, message)
 
-# Попытка 2
-#     media_group = []
-#
-#     for photo in photos:
-#         if isinstance(photo, Photo):
-#             # Если это объект Photo, используйте атрибуты
-#             media_group.append(InputMediaPhoto(media=photo.file_id, caption=photo.caption))
-#         elif isinstance(photo, PhotoSize):
-#             # Если это объект PhotoSize, используйте другие атрибуты, например, file_id
-#             media_group.append(InputMediaPhoto(media=photo.file_id, caption=""))
-#
-#     # Отправляем медиагруппу в канал
-#     await bot.send_media_group(chat_id=CHANNEL_ID, media=media_group)
-#     photos = user_data["car_photos"]
-#     # media_group = [InputMediaPhoto(media=photo["file_id"], caption=photo.get("caption", "")) for photo in photos]
-#     media_group = [InputMediaPhoto(media=photo.file_id, caption=photo.caption) for photo in photos if isinstance(photo, PhotoSize)]
-#
-#
-#     # Отправляем медиагруппу в канал
-#     await bot.send_media_group(chat_id=CHANNEL_ID, media=media_group, caption=user_data)
-#
-#
-#     # Отправляем уведомление пользователю о успешной отправке
-#     await bot.send_message(event.from_user.id, "Фотографии отправлены в канал.")
-
+    await state.reset_state()
 
 
 if __name__ == '__main__':
