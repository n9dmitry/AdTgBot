Index: bot v7.3.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from aiogram import Bot, Dispatcher, types\nfrom aiogram.types import InputMediaPhoto, ParseMode\nfrom aiogram.contrib.fsm_storage.memory import MemoryStorage\nfrom aiogram.dispatcher import FSMContext\nfrom aiogram.types import ReplyKeyboardMarkup, KeyboardButton\nimport uuid\nimport asyncio\nfrom config import *\nfrom state import *\nimport json\n\n# Загрузка JSON в начале скрипта\nwith open('dicts.json', 'r', encoding='utf-8') as file:\n    dicts = json.load(file)\n\ndict_car_brands_and_models = dicts.get(\"dict_car_brands_and_models\", {})\ndict_car_body_types = dicts.get(\"dict_car_body_types\", {})\ndict_car_engine_types = dicts.get(\"dict_car_engine_types\", {})\ndict_car_transmission_types = dicts.get(\"dict_car_transmission_types\", {})\ndict_car_colors = dicts.get(\"dict_car_colors\", {})\ndict_car_document_statuses = dicts.get(\"dict_car_document_statuses\", {})\ndict_car_owners = dicts.get(\"dict_car_owners\", {})\ndict_car_customs_cleared = dicts.get(\"dict_car_customs_cleared\", {})\ndict_currency = dicts.get(\"dict_currency\", {})\ndict_car_conditions = dicts.get(\"dict_car_conditions\", {})\ndict_car_mileages = dicts.get(\"dict_car_mileages\", {})\n# Конец импорта json словарей\n\n\n# get_car_data\n# get_car_data_input\n\nclass CarBotHandler:\n    def __init__(self):\n        self.lock = asyncio.Lock()\n\n    async def start(self, event, state):\n        user_id = event.from_user.id\n        user_data = await state.get_data() or {}\n        user_data[\"user_id\"] = user_id\n        await event.answer(f\"Привет, {event.from_user.first_name}! Я бот для сбора данных. Давай начнем.\")\n\n        # Создаем ReplyKeyboardMarkup с вариантами выбора бренда\n        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)\n        brands = list(dict_car_brands_and_models.keys())\n        buttons = [KeyboardButton(text=brand) for brand in brands]\n        keyboard.add(*buttons)\n        keyboard.add(KeyboardButton(text='Ввести свою марку'))\n\n        await event.answer(\"Выберите бренд автомобиля:\", reply_markup=keyboard)\n        await state.set_state(STATE_CAR_BRAND)\n\n    async def process_brand_selection(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        selected_brand = event.text\n\n        user_data[\"car_brand\"] = selected_brand\n        await state.update_data(user_data=user_data)\n\n        # Создаем ReplyKeyboardMarkup с моделями выбранного бренда\n        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)\n        models = dict_car_brands_and_models[selected_brand]\n        buttons = [KeyboardButton(text=model) for model in models]\n        keyboard.add(*buttons)\n\n        await event.answer(\"Выберите модель автомобиля:\", reply_markup=keyboard)\n        await state.set_state(STATE_CAR_MODEL)\n\n    async def process_model(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        selected_model = event.text\n\n        user_data[\"car_model\"] = selected_model\n        await state.update_data(user_data=user_data)\n\n        await event.answer(\"Отлично! Какой год выпуска у автомобиля?\")\n        await state.set_state(STATE_CAR_YEAR)\n\n    async def get_car_year(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_year\"] = event.text\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        keyboard.add(*dict_car_body_types)  # Добавляем кнопки на основе словаря\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Отлично! Какой тип кузова у автомобиля?\", reply_markup=keyboard)\n        await state.set_state(STATE_CAR_BODY_TYPE)\n\n    async def get_car_body_type(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_body_type\"] = event.text\n\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        keyboard.add(*dict_car_engine_types)  # Добавляем кнопки на основе словаря\n\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Отлично! Какой тип двигателя у автомобиля?\", reply_markup=keyboard)\n        await state.set_state(STATE_CAR_ENGINE_TYPE)\n\n    async def get_car_engine_type(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_engine_type\"] = event.text\n\n        # Добавляем кнопки на основе словаря\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Хорошо! Какой объем двигателя у автомобиля?\")\n        await state.set_state(STATE_CAR_ENGINE_VOLUME)\n\n    async def get_car_engine_volume(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_engine_volume\"] = event.text\n\n        # Добавляем кнопки на основе словаря\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Отлично! Укажите мощность двигателя автомобиля (л.с.). Например: 200\")\n        await state.set_state(STATE_CAR_POWER)\n\n    async def get_car_power(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_power\"] = event.text\n\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        keyboard.add(*dict_car_transmission_types)\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Отлично! Какой тип коробки передач используется в автомобиле?\", reply_markup=keyboard)\n        await state.set_state(STATE_CAR_TRANSMISSION_TYPE)\n\n    async def get_car_transmission_type(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_transmission_type\"] = event.text\n\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        keyboard.add(*dict_car_colors)\n\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Какого цвета автомобиль?\", reply_markup=keyboard)\n        await state.set_state(STATE_CAR_COLOR)\n\n    async def get_car_color(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_color\"] = event.text\n\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        keyboard.add(*dict_car_mileages)\n\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Каков пробег автомобиля? Введите пробег, например: 100 000. Если у авто нет пробега, нажмите 'Новый'\", reply_markup=keyboard)\n        await state.set_state(STATE_CAR_MILEAGE)\n\n    async def get_car_mileage(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_mileage\"] = event.text\n\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        keyboard.add(*dict_car_document_statuses)\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Каков статус документов у автомобиля?\", reply_markup=keyboard)\n        await state.set_state(STATE_CAR_DOCUMENT_STATUS)\n\n    async def get_car_document_status(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_document_status\"] = event.text\n\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        keyboard.add(*dict_car_owners)\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Сколько владельцев у автомобиля?\", reply_markup=keyboard)\n        await state.set_state(STATE_CAR_OWNERS)\n\n    async def get_car_owners(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_owners\"] = event.text\n\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        keyboard.add(*dict_car_customs_cleared)\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Растаможен ли автомобиль?\", reply_markup=keyboard)\n        await state.set_state(STATE_CAR_CUSTOMS_CLEARED)\n\n    async def get_car_customs_cleared(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_customs_cleared\"] = event.text\n\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        keyboard.add(*dict_car_conditions)\n\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Выберите состояние автомобиля:\", reply_markup=keyboard)\n        await state.set_state(STATE_CAR_CONDITION)\n\n    async def get_car_condition(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_condition\"] = event.text\n\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Добавьте описание.\")\n        await state.set_state(STATE_CAR_DESCRIPTION)\n\n    async def get_car_description(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_description\"] = event.text\n\n        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        keyboard.add(*dict_currency)\n\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Выберите валюту:\", reply_markup=keyboard)\n        await state.set_state(STATE_SELECT_CURRENCY)\n\n    async def select_currency(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"currency\"] = event.text\n        await state.update_data(user_data=user_data)\n\n        await event.answer(\"Какова цена автомобиля?\")\n        await state.set_state(STATE_CAR_PRICE)\n\n    async def get_car_price(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_price\"] = event.text\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Прекрасно! Где находится автомобиль? (Например: Харцызск)\")\n        await state.set_state(STATE_CAR_LOCATION)\n\n    async def get_car_location(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"car_location\"] = event.text\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Прекрасно! Укажите имя продавца. (+7**********)\")\n        await state.set_state(STATE_SELLER_NAME)\n\n    async def get_seller_name(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"seller_name\"] = event.text\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Отлично! Какой телефонный номер у продавца?\")\n        await state.set_state(STATE_SELLER_PHONE)\n\n    async def get_seller_phone(self, event, state):\n        user_data = (await state.get_data()).get(\"user_data\", {})\n        user_data[\"seller_phone\"] = event.text\n        await state.update_data(user_data=user_data)\n        await event.answer(\"Добавьте фотографии авто\")\n        await state.set_state(STATE_CAR_PHOTO)\n\n    async def handle_photos(self, message, state):\n        user_data = await state.get_data('user_data')\n        photo_id = message.photo[-1].file_id\n\n        caption = (\n            f\"\uD83D\uDEDE <b>#{user_data.get('user_data').get('car_brand')}{user_data.get('user_data').get('car_model')}</b>\\n\\n\"\n            f\"   <b>-Год:</b> {user_data.get('user_data', {}).get('car_year')}\\n\"\n            f\"   <b>-Пробег (км.):</b> {user_data.get('user_data').get('car_mileage')}\\n\"\n            f\"   <b>-Тип КПП:</b> {user_data.get('user_data').get('car_transmission_type')}\\n\"\n            f\"   <b>-Кузов:</b> {user_data.get('user_data').get('car_body_type')}\\n\"\n            f\"   <b>-Тип двигателя:</b> {user_data.get('user_data').get('car_engine_type')}\\n\"\n            f\"   <b>-Объем двигателя (л.):</b> {user_data.get('user_data').get('car_engine_volume')}\\n\"\n            f\"   <b>-Мощность (л.с.):</b> {user_data.get('user_data').get('car_power')}\\n\"\n            f\"   <b>-Цвет:</b> {user_data.get('user_data').get('car_color')}\\n\"\n            f\"   <b>-Статус документов:</b> {user_data.get('user_data').get('car_document_status')}\\n\"\n            f\"   <b>-Количество владельцев:</b> {user_data.get('user_data').get('car_owners')}\\n\"\n            f\"   <b>-Растаможка:</b> {'Да' if user_data.get('user_data').get('car_customs_cleared') else 'Нет'}\\n\"\n            f\"   <b>-Состояние:</b> {user_data.get('user_data').get('car_condition')}\\n\\n\"\n            f\"ℹ\uFE0F<b>Дополнительная информация:</b> {user_data.get('user_data').get('car_description')}\\n\\n\"\n            f\"\uD83D\uDD25<b>Цена:</b> {user_data.get('user_data').get('car_price')} {user_data.get('user_data').get('currency')}\\n\\n\"\n            f\"\uD83D\uDCCD<b>Местоположение:</b> {user_data.get('user_data').get('car_location')}\\n\"\n            f\"\uD83D\uDC64<b>Продавец:</b> <span class='tg-spoiler'> {user_data.get('user_data').get('seller_name')} </span>\\n\"\n            f\"\uD83D\uDCF2<b>Телефон продавца:</b> <span class='tg-spoiler'>{user_data.get('user_data').get('seller_phone')} </span>\\n\"\n            f\"\uD83D\uDCAC<b>Телеграм:</b> <span class='tg-spoiler'>{message.from_user.username if message.from_user.username is not None else 'по номеру телефона'}</span>\\n\\n\"            \n            f\"ООО 'Продвижение' Авто в ДНР (link: разместить авто)\"\n        )\n\n\n        print(user_data)\n        photo_uuid = str(uuid.uuid4())\n\n        if \"sent_photos\" not in user_data:\n            user_data[\"sent_photos\"] = []\n\n        user_data[\"sent_photos\"].append({\"file_id\": photo_id, \"uuid\": photo_uuid})\n        buffered_photos.append(InputMediaPhoto(media=photo_id, caption=caption, parse_mode=types.ParseMode.HTML))\n        if len(buffered_photos) > 1:\n            for i in range(len(buffered_photos) - 1):\n                buffered_photos[i].caption = None\n            last_photo = buffered_photos[-1]\n            last_photo.caption = caption\n\n        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(\n            KeyboardButton(\"Отправить объявление\")\n        )\n        await message.reply(\"Фото добавлено\", reply_markup=keyboard)\n        await state.finish()\n\n    async def send_advertisement(self, message, state):\n        user_id = message.from_user.id\n        user_data = await state.get_data()\n        await self.send_photos_to_channel(user_id, user_data)\n        await message.answer(\"Объявление отправлено в канал.\")\n\n    async def send_photos_to_channel(self, user_id, user_data):\n        async with lock:\n            if buffered_photos:\n                await bot.send_media_group(chat_id=CHANNEL_ID, media=buffered_photos, disable_notification=True)\n                await bot.send_message(user_id, \"Фотографии отправлены в канал.\")\n                buffered_photos.clear()\n\n\ncar_bot = CarBotHandler()\nbot = Bot(token=API_TOKEN)\ndp = Dispatcher(bot, storage=MemoryStorage())\nlock = asyncio.Lock()\nbuffered_photos = []\n\n@dp.message_handler(commands=[\"start\"])\nasync def cmd_start(event: types.Message, state: FSMContext):\n    await car_bot.start(event, state)\n\n@dp.message_handler(state=STATE_CAR_BRAND)\nasync def process_brand_selection(event: types.Message, state: FSMContext):\n    await car_bot.process_brand_selection(event, state)\n\n@dp.message_handler(state=STATE_CAR_MODEL)\nasync def process_model(event: types.Message, state: FSMContext):\n    await car_bot.process_model(event, state)\n\n@dp.message_handler(state=STATE_CAR_YEAR)\nasync def get_car_year_handler(event: types.Message, state: FSMContext):\n    await car_bot.get_car_year(event, state)\n\n@dp.message_handler(state=STATE_CAR_BODY_TYPE)\nasync def get_car_body_type(event: types.Message, state: FSMContext):\n    await car_bot.get_car_body_type(event, state)\n\n@dp.message_handler(state=STATE_CAR_ENGINE_TYPE)\nasync def get_car_engine_type(event: types.Message, state: FSMContext):\n    await car_bot.get_car_engine_type(event, state)\n\n@dp.message_handler(state=STATE_CAR_ENGINE_VOLUME)\nasync def get_car_engine_volume(event: types.Message, state: FSMContext):\n    await car_bot.get_car_engine_volume(event, state)\n\n@dp.message_handler(state=STATE_CAR_POWER)\nasync def get_car_power(event: types.Message, state: FSMContext):\n    await car_bot.get_car_power(event, state)\n\n@dp.message_handler(state=STATE_CAR_TRANSMISSION_TYPE)\nasync def get_car_transmission_type(event: types.Message, state: FSMContext):\n    await car_bot.get_car_transmission_type(event, state)\n\n@dp.message_handler(state=STATE_CAR_COLOR)\nasync def get_car_color(event: types.Message, state: FSMContext):\n    await car_bot.get_car_color(event, state)\n\n@dp.message_handler(state=STATE_CAR_MILEAGE)\nasync def get_car_mileage(event: types.Message, state: FSMContext):\n    await car_bot.get_car_mileage(event, state)\n\n@dp.message_handler(state=STATE_CAR_DOCUMENT_STATUS)\nasync def get_car_document_status(event: types.Message, state: FSMContext):\n    await car_bot.get_car_document_status(event, state)\n\n@dp.message_handler(state=STATE_CAR_OWNERS)\nasync def get_car_owners(event: types.Message, state: FSMContext):\n    await car_bot.get_car_owners(event, state)\n\n@dp.message_handler(state=STATE_CAR_CUSTOMS_CLEARED)\nasync def get_car_customs_cleared(event: types.Message, state: FSMContext):\n    await car_bot.get_car_customs_cleared(event, state)\n\n@dp.message_handler(state=STATE_CAR_CONDITION)\nasync def get_car_condition(event: types.Message, state: FSMContext):\n    await car_bot.get_car_condition(event, state)\n\n@dp.message_handler(state=STATE_CAR_DESCRIPTION)\nasync def get_car_description(event: types.Message, state: FSMContext):\n    await car_bot.get_car_description(event, state)\n\n@dp.message_handler(state=STATE_SELECT_CURRENCY)\nasync def select_currency(event: types.Message, state: FSMContext):\n    await car_bot.select_currency(event, state)\n\n@dp.message_handler(state=STATE_CAR_PRICE)\nasync def get_car_price(event: types.Message, state: FSMContext):\n    await car_bot.get_car_price(event, state)\n\n@dp.message_handler(state=STATE_CAR_LOCATION)\nasync def get_car_location_handler(event: types.Message, state: FSMContext):\n    await car_bot.get_car_location(event, state)\n\n@dp.message_handler(state=STATE_SELLER_NAME)\nasync def get_seller_name_handler(event: types.Message, state: FSMContext):\n    await car_bot.get_seller_name(event, state)\n\n@dp.message_handler(state=STATE_SELLER_PHONE)\nasync def get_seller_phone_handler(event: types.Message, state: FSMContext):\n    await car_bot.get_seller_phone(event, state)\n\n@dp.message_handler(state=STATE_CAR_PHOTO, content_types=['photo'])\nasync def handle_photos_handler(message: types.Message, state: FSMContext):\n    await car_bot.handle_photos(message, state)\n\n@dp.message_handler(lambda message: message.text == \"Отправить объявление\")\nasync def send_advertisement(message: types.Message, state: FSMContext):\n    await car_bot.send_advertisement(message, state)\n    await car_bot.send_photos_to_channel(message.from_user.id, await state.get_data())\n\n\n# старт бота\nif __name__ == '__main__':\n    from aiogram import executor\n    executor.start_polling(dp, skip_updates=True)
===================================================================
diff --git a/bot v7.3.py b/bot v7.3.py
--- a/bot v7.3.py	
+++ b/bot v7.3.py	
@@ -6,7 +6,7 @@
 import uuid
 import asyncio
 from config import *
-from state import *
+from states import *
 import json
 
 # Загрузка JSON в начале скрипта
@@ -225,14 +225,14 @@
         user_data = (await state.get_data()).get("user_data", {})
         user_data["car_location"] = event.text
         await state.update_data(user_data=user_data)
-        await event.answer("Прекрасно! Укажите имя продавца. (+7**********)")
+        await event.answer("Прекрасно! Укажите имя продавца.")
         await state.set_state(STATE_SELLER_NAME)
 
     async def get_seller_name(self, event, state):
         user_data = (await state.get_data()).get("user_data", {})
         user_data["seller_name"] = event.text
         await state.update_data(user_data=user_data)
-        await event.answer("Отлично! Какой телефонный номер у продавца?")
+        await event.answer("Отлично! Какой телефонный номер у продавца? (например +7**********)")
         await state.set_state(STATE_SELLER_PHONE)
 
     async def get_seller_phone(self, event, state):
diff --git a/state.py b/states.py
rename from state.py
rename to states.py
