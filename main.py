import asyncio
import json
import random
import datetime
import uuid
import openpyxl

from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import KeyboardButton, InputMediaPhoto, Message
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.markdown import hlink
from fuzzywuzzy import fuzz

from config import *
from states import *
from validation import *
from enumlist import *
from middleware_photogroup import AlbumMiddleware

router = Router()

router.message.middleware(AlbumMiddleware())

lock = asyncio.Lock()
session = AiohttpSession()
bot_settings = {"session": session, "parse_mode": ParseMode.HTML}
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()


async def main():
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


# –ó–∞–≥—Ä—É–∑–∫–∞ JSON –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞
with open('dicts.json', 'r', encoding='utf-8') as file:
    dicts = json.load(file)

dict_start_brands = dicts.get("dict_start_brands", {})
dict_car_body_types = dicts.get("dict_car_body_types", {})
dict_car_engine_types = dicts.get("dict_car_engine_types", {})
dict_car_transmission_types = dicts.get("dict_car_transmission_types", {})
dict_car_colors = dicts.get("dict_car_colors", {})
dict_car_document_statuses = dicts.get("dict_car_document_statuses", {})
dict_car_owners = dicts.get("dict_car_owners", {})
dict_car_customs_cleared = dicts.get("dict_car_customs_cleared", {})
dict_currency = dicts.get("dict_currency", {})
dict_car_conditions = dicts.get("dict_car_conditions", {})
dict_car_mileages = dicts.get("dict_car_mileages", {})
dict_edit_buttons = dicts.get("dict_edit_buttons", {})


# –ö–æ–Ω–µ—Ü –∏–º–ø–æ—Ä—Ç–∞ json —Å–ª–æ–≤–∞—Ä–µ–π
# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

def create_keyboard(button_texts):
    buttons = [KeyboardButton(text=text) for text in button_texts]
    builder = ReplyKeyboardBuilder()
    builder.add(*buttons).adjust(2)
    return builder


def create_keyboard_inline(buttons):
    builder = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return builder


async def add_message_id(state, message_id):
    user_data = await state.get_data()
    if 'msg_ids' not in user_data:
        user_data['msg_ids'] = []
    if message_id not in user_data['msg_ids']:
        user_data['msg_ids'].append(message_id)
    await state.update_data(user_data)


async def send_photo_with_caption(message, state, image_path, caption, builder=None):
    user_data = await state.get_data()
    reply_markup = None
    if builder:
        reply_markup = builder.as_markup(resize_keyboard=True)
    sent_message = await message.answer_photo(photo=types.FSInputFile(image_path), caption=caption,
                                              reply_markup=reply_markup)
    # await add_message_id(state, sent_message.message_id)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–µ–π
    return sent_message


async def delete_saved_messages(message, state):
    user_data = await state.get_data()
    chat_id = message.chat.id
    if 'msg_ids' not in user_data:
        user_data['msg_ids'] = []
    msg_ids_copy = user_data['msg_ids'].copy()

    for message_id in msg_ids_copy:
        try:
            user_data['msg_ids'].remove(message_id)
            await message.bot.delete_message(chat_id, message_id)
            # await state.update_data(user_data)
        except Exception as e:
            print('–û—à–∏–±–∫–∞:', e)
        #     print(user_data)
        #     print(message_id)

        #     print(f"Error deleting message")
        #     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ msg_ids
        #     user_data['msg_ids'].remove(message_id)
    await state .update_data(user_data)



async def recognize_car_model(message, brand_name):
    models = []
    similar_brands = []
    if brand_name.lower() in ['–∂–∏–≥—É–ª–∏']:
        brand_name = 'Lada (–í–ê–ó)'

    with open('cars.json', encoding='utf-8') as file:
        data = json.load(file)

    found_brand = False
    for item in data:
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –±—Ä–µ–Ω–¥–∞ —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
        if 'name' in item and fuzz.token_sort_ratio(brand_name.lower(), item['name'].lower()) >= 90:
            if 'models' in item:
                models = item['models']
            found_brand = True
            break
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏ –±—Ä–µ–Ω–¥–∞
        elif 'cyrillic-name' in item and fuzz.token_sort_ratio(brand_name.lower(), item['cyrillic-name'].lower()) >= 90:
            if 'models' in item:
                models = item['models']
            found_brand = True
            break

    if not found_brand and len(brand_name) >= 3:
        for inner_item in data:
            # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –±—Ä–µ–Ω–¥–æ–≤ —Å —É—á–µ—Ç–æ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
            if 'name' in inner_item and fuzz.token_sort_ratio(brand_name.lower(), inner_item['name'].lower()) >= 75 and \
                    inner_item['name'] not in similar_brands:
                similar_brands.append(inner_item['name'])
            # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö –±—Ä–µ–Ω–¥–æ–≤
            elif 'cyrillic-name' in inner_item and fuzz.token_sort_ratio(brand_name.lower(),
                                                                         inner_item['cyrillic-name'].lower()) >= 75 \
                    and inner_item['name'] not in similar_brands:
                similar_brands.append(inner_item['name'])

        if similar_brands:
            response_message = "–ü–æ—Ö–æ–∂–∏–µ –±—Ä–µ–Ω–¥—ã:\n" + "\n".join(similar_brands)
            await message.answer(response_message)

    return models


# –ö–æ–º–∞–Ω–¥—ã
@router.message(F.text == "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞")
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
@router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
@router.message(Cmd.STATE_SUPPORT_END)
@router.message(Command("restart"))
async def restart(message: types.Message, state: FSMContext):
    await delete_saved_messages(message, state)
    await state.clear()
    msg = await message.answer("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
    await add_message_id(state, msg.message_id)
    await start(message, state)


@router.message(Command("support"))
async def support(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    secret_number = str(random.randint(100, 999))

    await message.answer(f"–ù–∞—à–ª–∏ –±–∞–≥? –î–∞–≤–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º! "
                         f"–ù–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É. –î–æ–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ {secret_number}:")
    user_data['secret_number'] = secret_number
    await state.update_data(user_data)
    await state.set_state(Cmd.STATE_SUPPORT_VALIDATION)


@router.message(Cmd.STATE_SUPPORT_VALIDATION)
async def support_validation(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    secret_number = user_data['secret_number']
    if message.text.isdigit() and message.text == secret_number:
        await message.reply(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        await asyncio.sleep(1)
        await message.answer(f"–û–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –≤ –¥–µ—Ç–∞–ª—è—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ")
        await state.set_state(Cmd.STATE_SUPPORT_MESSAGE)
    else:
        await message.answer(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
        await asyncio.sleep(1)
        await support(message, state)


@router.message(Cmd.STATE_SUPPORT_MESSAGE)
async def support_message(message: types.Message, state: FSMContext):
    current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    message_to_write = f"""
    –î–∞—Ç–∞: {current_time}
    –ò–º—è: {message.from_user.full_name}
    Telegram @{message.from_user.username or message.from_user.id} 

    –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}
    ...
        """
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    with open("support.txt", "a") as file:
        file.write(message_to_write)
    builder = create_keyboard(['–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞'])
    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É!",
                        reply_markup=builder.as_markup(resize_keyboard=True))
    await state.set_state(Cmd.STATE_SUPPORT_END)


@router.message(CommandStart())
async def start(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    buttons = [
        [types.InlineKeyboardButton(text='üöó –ê–≤—Ç–æ', callback_data='–ê–≤—Ç–æ')],
        [types.InlineKeyboardButton(text='üè¢ –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', callback_data='–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å')],
        [types.InlineKeyboardButton(text='üíº –†–∞–±–æ—Ç–∞', callback_data='–†–∞–±–æ—Ç–∞')],
    ]
    builder = create_keyboard_inline(buttons)
    msg = await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Ä–∞–∑–º–µ—Å—Ç–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ! \n –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=builder)
    await add_message_id(state, msg.message_id)
    await state.update_data(user_data)


@router.callback_query(F.data == "–ê–≤—Ç–æ")
@router.message(Car.STATE_START_CARBOT)
async def car_bot_start(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    await delete_saved_messages(callback_query.message, state)
    #
    # image_hello_path = ImageDirectory.auto_say_hi
    # msg = await send_photo_with_caption(callback_query.message, state, image_hello_path,
    #                                     f"–ü—Ä–∏–≤–µ—Ç, {callback_query.from_user.first_name}! –î–∞–≤–∞–π –ø—Ä–æ–¥–∞–¥–∏–º —Ç–≤–æ—ë –∞–≤—Ç–æ! –ù–∞—á–Ω—ë–º –∂–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö!")
    # await add_message_id(state, msg.message_id)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–µ–π
    # await asyncio.sleep(0.5)
    builder = create_keyboard(dict_start_brands)
    image_path = ImageDirectory.auto_car_brand
    msg = await send_photo_with_caption(callback_query.message, state, image_path, "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
                                        builder)
    await add_message_id(state, msg.message_id)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–µ–π
    await state.set_state(Car.STATE_CAR_BRAND)


@router.callback_query(F.data == "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å")
@router.message(Estate.STATE_START_ESTATEBOT)
async def estate_bot_start(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    image_hello_path = ImageDirectory.auto_say_hi
    await send_photo_with_caption(callback_query.message, state, image_hello_path,
                                  f"–ü—Ä–∏–≤–µ—Ç, {callback_query.from_user.first_name}! –î–∞–≤–∞–π –ø—Ä–æ–¥–∞–¥–∏–º —Ç–≤–æ—é üè¢ –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å! –ù–∞—á–Ω—ë–º –∂–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö!")
    await asyncio.sleep(0.5)
    builder = create_keyboard(dict_start_brands)
    image_path = ImageDirectory.auto_car_brand
    await send_photo_with_caption(callback_query.message, state, image_path, "–ß—Ç–æ –∑–∞ üè¢ –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —É —Ç–µ–±—è?:", builder)
    await state.set_state(X.X)


@router.callback_query(F.data == "–†–∞–±–æ—Ç–∞")
@router.message(Hr.STATE_START_HRBOT)
async def hr_bot_start(callback_query: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    image_hello_path = ImageDirectory.auto_say_hi
    await send_photo_with_caption(callback_query.message, state, image_hello_path,
                                  f"–ü—Ä–∏–≤–µ—Ç, {callback_query.from_user.first_name}! –î–∞–≤–∞–π –Ω–∞–π–¥—ë–º —Ç–µ–±–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞! –ù–∞—á–Ω—ë–º –∂–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö!")
    await asyncio.sleep(0.5)
    builder = create_keyboard(dict_start_brands)
    image_path = ImageDirectory.auto_car_brand
    await send_photo_with_caption(callback_query.message, state, image_path, "–ß—Ç–æ –∑–∞ –≤–∞–∫–∞–Ω—Å–∏—è —É —Ç–µ–±—è?:", builder)
    await state.set_state(X.X)


@router.message(X.X)
async def x(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    print("–æ—Ç—Ä–∞–±–æ—Ç–∞–ª–æ!")


@router.message(Car.STATE_CAR_BRAND)
async def get_car_brand(message, state):
    user_data = await state.get_data()
    search_brand = message.text
    await state.update_data(car_brand=search_brand)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    await delete_saved_messages(message, state)

    if search_brand == "‚å® –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –±—Ä–µ–Ω–¥":
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä–∫–∏ —Å–≤–æ–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        await add_message_id(state, msg.message_id)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–µ–π
    else:
        models = await recognize_car_model(message, search_brand)
        if not models:
            msg = await message.answer("–ú–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            await add_message_id(state, msg.message_id)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–µ–π
            await state.set_state(Car.STATE_CAR_BRAND)
        else:
            model_names = [model['name'] for model in models]
            builder = create_keyboard(model_names)
            image_path = ImageDirectory.auto_car_model
            msg = await send_photo_with_caption(message, state, image_path,"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:")
            await add_message_id(state, msg.message_id)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–µ–π
            msg = await message.answer(f"–ú–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –º–∞—Ä–∫–∏ '{search_brand}':",
                                       reply_markup=builder.as_markup(resize_keyboard=True))
            await add_message_id(state, msg.message_id)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–µ–π
            await state.set_state(Car.STATE_CAR_MODEL)

@router.message(Car.STATE_CAR_MODEL)
async def get_car_model(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)

    await state.update_data(car_model=message.text)
    image_path = ImageDirectory.auto_car_year
    msg = await send_photo_with_caption(message, state, image_path, "–ö–∞–∫–æ–π –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è? (‚å® –Ω–∞–ø–∏—à–∏—Ç–µ)")
    await add_message_id(state, msg.message_id)
    await state.set_state(Car.STATE_CAR_YEAR)


@router.message(Car.STATE_CAR_YEAR)
async def get_car_year(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('1', user_data)

    if await validate_year(message.text):
        await state.update_data(car_year=message.text)
        builder = create_keyboard(dict_car_body_types)
        image_path = ImageDirectory.auto_car_body_type
        msg = await send_photo_with_caption(message, state, image_path, "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —Ç–∏–ø –∫—É–∑–æ–≤–∞ —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?",
                                            builder)
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_BODY_TYPE)
    else:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1990 –∏–ª–∏ 2024)")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_YEAR)


@router.message(Car.STATE_CAR_BODY_TYPE)
async def get_car_body_type(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('2', user_data)

    if await validate_button_input(message.text, dict_car_body_types):
        builder = create_keyboard(dict_car_engine_types)
        await state.update_data(car_body_type=message.text)
        image_path = ImageDirectory.auto_car_engine_type
        msg = await send_photo_with_caption(message, state, image_path, "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?",
                                            builder)
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_ENGINE_TYPE)
    else:
        builder = create_keyboard(dict_car_body_types)
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∫—É–∑–æ–≤–∞.",
                                   builder.as_markup(resize_keyboard=True))
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_BODY_TYPE)


@router.message(Car.STATE_CAR_ENGINE_TYPE)
async def get_car_engine_type(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('3', user_data)

    if await validate_button_input(message.text, dict_car_engine_types):
        await state.update_data(car_engine_type=message.text)
        image_path = ImageDirectory.auto_car_engine_volume
        msg = await send_photo_with_caption(message, state, image_path,
                                            "–•–æ—Ä–æ—à–æ! –ö–∞–∫–æ–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–ª.)? (‚å® –Ω–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É: –Ω–∞–ø—Ä–∏–º–µ—Ä 1.6)")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_ENGINE_VOLUME)
    else:
        builder = create_keyboard(dict_car_engine_types)
        msg = await message.answer("‚å® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è.",
                                   reply_markup=builder.as_markup(resize_keyboard=True))
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_ENGINE_TYPE)


@router.message(Car.STATE_CAR_ENGINE_VOLUME)
async def get_car_engine_volume(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('4', user_data)

    try:
        if "," in message.text:
            message.text = message.text.replace(',', '.')
        volume = float(message.text)

        if await validate_engine_volume(volume) and 0.2 <= volume <= 10.0:
            await state.update_data(car_engine_volume=volume)
            image_path = ImageDirectory.auto_car_power
            msg = await send_photo_with_caption(message, state, image_path,
                                                "–û—Ç–ª–∏—á–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Ç 50 –¥–æ 1000 (–ª.—Å.). (–Ω–∞–ø–∏—à–∏—Ç–µ)")
            await add_message_id(state, msg.message_id)
            await state.set_state(Car.STATE_CAR_POWER)
        else:
            msg = await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 0.2 –¥–æ 10.0 –ª–∏—Ç—Ä–æ–≤) —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –∏–ª–∏ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º(!).")
            await add_message_id(state, msg.message_id)
            await state.set_state(Car.STATE_CAR_ENGINE_VOLUME)

    except ValueError:
        msg = await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 0.2 –¥–æ 10.0 –ª–∏—Ç—Ä–æ–≤) —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –∏–ª–∏ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º(!).")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_ENGINE_VOLUME)


@router.message(Car.STATE_CAR_POWER)
async def get_car_power(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('5', user_data)

    if await validate_car_power(message.text):
        builder = create_keyboard(dict_car_transmission_types)
        await state.update_data(car_power=message.text)
        image_path = ImageDirectory.auto_car_transmission_type
        msg = await send_photo_with_caption(message, state, image_path,
                                            "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —Ç–∏–ø –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ?", builder)
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_TRANSMISSION_TYPE)
    else:
        msg = await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç 50 –¥–æ 1000 –ª.—Å.).")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_POWER)


@router.message(Car.STATE_CAR_TRANSMISSION_TYPE)
async def get_car_transmission_type(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('6', user_data)

    if await validate_button_input(message.text, dict_car_transmission_types):
        builder = create_keyboard(dict_car_colors)
        await state.update_data(car_transmission_type=message.text)
        image_path = ImageDirectory.auto_car_color
        msg = await send_photo_with_caption(message, state, image_path, "–ö–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å?", builder)
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_COLOR)
    else:
        builder = create_keyboard(dict_car_transmission_types)
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏.",
                                   reply_markup=builder.as_markup(resize_keyboard=True))
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_TRANSMISSION_TYPE)


@router.message(Car.STATE_CAR_COLOR)
async def get_car_color(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('7', user_data)

    if await validate_button_input(message.text, dict_car_colors):
        builder = create_keyboard(dict_car_mileages)
        await state.update_data(car_color=message.text)
        image_path = ImageDirectory.auto_car_mileage
        msg = await send_photo_with_caption(message, state, image_path,
                                            "–ö–∞–∫–æ–π –ø—Ä–æ–±–µ–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è(–∫–º.), –Ω–∞–ø–∏—à–∏—Ç–µ ‚å®? (–µ—Å–ª–∏ –Ω–æ–≤—ã–π, –≤—ã–±–µ—Ä–∏—Ç–µ '–ù–æ–≤—ã–π')", builder)
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_MILEAGE)
    else:
        builder = create_keyboard(dict_car_colors)
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
                                   reply_markup=builder.as_markup(resize_keyboard=True))
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_COLOR)


@router.message(Car.STATE_CAR_MILEAGE)
async def get_car_mileage(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('8', user_data)

    if await validate_car_mileage(message.text):
        builder = create_keyboard(dict_car_document_statuses)
        await state.update_data(car_mileage=message.text)
        image_path = ImageDirectory.auto_car_document_status
        msg = await send_photo_with_caption(message, state, image_path,
                                            "–ö–∞–∫–æ–≤ —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è ?", builder)
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_DOCUMENT_STATUS)
    else:
        builder = create_keyboard(dict_car_mileages)
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, ‚å® –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–±–µ–≥–∞.",
                                   reply_markup=builder.as_markup(resize_keyboard=True))
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_MILEAGE)


@router.message(Car.STATE_CAR_DOCUMENT_STATUS)
async def get_car_document_status(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('9', user_data)

    if await validate_button_input(message.text, dict_car_document_statuses):
        builder = create_keyboard(dict_car_owners)
        await state.update_data(car_document_status=message.text)
        image_path = ImageDirectory.auto_car_owners
        msg = await send_photo_with_caption(message, state, image_path, "–°–∫–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —É –∞–≤—Ç–æ–º–æ–±–∏–ª—è?", builder)
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_OWNERS)
    else:
        builder = create_keyboard(dict_car_document_statuses)
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
                                   reply_markup=builder.as_markup(resize_keyboard=True))
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_DOCUMENT_STATUS)


@router.message(Car.STATE_CAR_OWNERS)
async def get_car_owners(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('10', user_data)

    if await validate_button_input(message.text, dict_car_owners):
        builder = create_keyboard(dict_car_customs_cleared)
        await state.update_data(car_owners=message.text)
        image_path = ImageDirectory.auto_car_customs_cleared
        msg = await send_photo_with_caption(message, state, image_path, "–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω –ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å?", builder)
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_CUSTOMS_CLEARED)
    else:
        builder = create_keyboard(dict_car_owners)
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
                                   reply_markup=builder.as_markup(resize_keyboard=True))
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_OWNERS)


@router.message(Car.STATE_CAR_CUSTOMS_CLEARED)
async def get_car_customs_cleared(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('11', user_data)

    if await validate_button_input(message.text, dict_car_customs_cleared):
        builder = create_keyboard(dict_car_conditions)
        await state.update_data(car_customs_cleared=message.text)
        image_path = ImageDirectory.auto_car_condition
        msg = await send_photo_with_caption(message, state, image_path, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", builder)
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_CONDITION)
    else:
        builder = create_keyboard(dict_car_customs_cleared)
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ä–∞—Å—Ç–∞–º–æ–∂–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
                                   reply_markup=builder.as_markup(resize_keyboard=True))
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_CUSTOMS_CLEARED)


@router.message(Car.STATE_CAR_CONDITION)
async def get_car_condition(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('12', user_data)

    if await validate_button_input(message.text, dict_car_conditions):
        await state.update_data(car_condition=message.text)
        image_path = ImageDirectory.auto_car_description
        msg = await send_photo_with_caption(message, state, image_path,
                                            "–û–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è. (‚å® –Ω–∞–ø–∏—à–∏—Ç–µ –¥–æ 350 —Å–∏–º–≤–æ–ª–æ–≤)")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_DESCRIPTION)
    else:
        builder = create_keyboard(dict_car_conditions)
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.",
                                   reply_markup=builder.as_markup(resize_keyboard=True))
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_CONDITION)


@router.message(Car.STATE_CAR_DESCRIPTION)
async def get_car_description(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('13', user_data)

    if await validate_length_text(message):
        if await validate_car_description(message.text):
            builder = create_keyboard(dict_currency)
            await state.update_data(car_description=message.text)
            image_path = ImageDirectory.auto_car_currency
            msg = await send_photo_with_caption(message, state, image_path, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", builder)
            await add_message_id(state, msg.message_id)
            await state.set_state(Car.STATE_SELECT_CURRENCY)
        else:
            msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
            await add_message_id(state, msg.message_id)
            await state.set_state(Car.STATE_CAR_DESCRIPTION)
    else:
        msg = await message.answer("–í–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ù–∞–ø–∏—à–∏—Ç–µ –¥–æ ~350 —Å–∏–º–≤–æ–ª–æ–≤:")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_DESCRIPTION)


@router.message(Car.STATE_SELECT_CURRENCY)
async def select_currency(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('14', user_data)

    if await validate_button_input(message.text, dict_currency):
        await state.update_data(currency=message.text)
        image_path = ImageDirectory.auto_car_price
        msg = await send_photo_with_caption(message, state, image_path, "‚å® –¶–µ–Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è?")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_PRICE)
    else:
        builder = create_keyboard(dict_currency)
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –≤–∞–ª—é—Ç—É.",
                                    reply_markup=builder.as_markup(resize_keyboard=True))
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_SELECT_CURRENCY)


@router.message(Car.STATE_CAR_PRICE)
async def get_car_price(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('15', user_data)

    if await validate_car_price(message.text):
        await state.update_data(car_price=message.text)
        image_path = ImageDirectory.auto_car_location
        msg = await send_photo_with_caption(message, state, image_path,
                                            "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å? –ì–æ—Ä–æ–¥/–ø—É–Ω–∫—Ç. (‚å® –Ω–∞–ø–∏—à–∏—Ç–µ)")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_LOCATION)
    else:
        msg = await message.answer("‚å® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_PRICE)


@router.message(Car.STATE_CAR_LOCATION)
async def get_car_location(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('16', user_data)

    if await validate_car_location(message.text):
        await state.update_data(car_location=message.text)
        image_path = ImageDirectory.auto_seller_name
        msg = await send_photo_with_caption(message, state, image_path, "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞. (‚å® –Ω–∞–ø–∏—à–∏—Ç–µ)")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_SELLER_NAME)
    else:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_CAR_LOCATION)


@router.message(Car.STATE_SELLER_NAME)
async def get_seller_name(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('17', user_data)

    if await validate_name(message.text) is True:
        await state.update_data(seller_name=message.text)
        image_path = ImageDirectory.auto_seller_phone
        msg = await send_photo_with_caption(message, state, image_path,
                                            "–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É –ø—Ä–æ–¥–∞–≤—Ü–∞? (‚å® –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXNNNXXNN –∏–ª–∏ 8XXXNNNXXNN)")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_SELLER_PHONE)
    else:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_SELLER_NAME)


@router.message(Car.STATE_SELLER_PHONE)
async def get_seller_phone(message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('18', user_data)

    if await validate_phone_number(message.text) is True:
        phone_text = '+7' + message.text[1:] if message.text.startswith('8') else message.text
        await state.update_data(seller_phone=phone_text)
        if await validate_final_length(message, state, user_data):
            image_path = ImageDirectory.auto_car_photos
            msg = await send_photo_with_caption(message, state, image_path,
                                                "–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ –¥–æ 10 —à—Ç—É–∫ (–ó–∞ –æ–¥–∏–Ω —Ä–∞–∑!)")
            await add_message_id(state, msg.message_id)
            await state.set_state(Car.STATE_CAR_PHOTO)
        else:
            await message.reply(
                f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º! \n–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –±–æ—Ç–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
    else:
        msg = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXNNNXXNN.")
        await add_message_id(state, msg.message_id)
        await state.set_state(Car.STATE_SELLER_PHONE)


@router.message(Car.STATE_CAR_PHOTO)
@router.message(F.media_group_id)
async def handle_photos(message: types.Message, state: FSMContext, album: list[Message]):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('19', user_data)
    if 'sent_photos' not in user_data:
        user_data['sent_photos'] = []
    new_id = str(uuid.uuid4().int)[:6]
    if 'new_id' not in user_data:
        user_data['new_id'] = new_id

    caption = (
        f"üõû <b>#{user_data['car_brand']}-{user_data['car_model']}</b>\n\n"
        f"   <b>-–ì–æ–¥:</b> {user_data['car_year']}\n"
        f"   <b>-–ü—Ä–æ–±–µ–≥ (–∫–º.):</b> {user_data['car_mileage']}\n"
        f"   <b>-–¢–∏–ø –ö–ü–ü:</b> {user_data['car_transmission_type']}\n"
        f"   <b>-–ö—É–∑–æ–≤:</b> {user_data['car_body_type']}\n"
        f"   <b>-–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {user_data['car_engine_type']}\n"
        f"   <b>-–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.):</b> {user_data['car_engine_volume']}\n"
        f"   <b>-–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.):</b> {user_data['car_power']}\n"
        f"   <b>-–¶–≤–µ—Ç:</b> {user_data['car_color']}\n"
        f"   <b>-–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {user_data['car_document_status']}\n"
        f"   <b>-–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:</b> {user_data['car_owners']}\n"
        f"   <b>-–†–∞—Å—Ç–∞–º–æ–∂–∫–∞:</b> {'–î–∞' if user_data['car_customs_cleared'] else '–ù–µ—Ç'}\n"
        f"   <b>-–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {user_data['car_condition']}\n\n"
        f"‚ÑπÔ∏è<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {user_data['car_description']}\n\n"
        f"üî•<b>–¶–µ–Ω–∞:</b> {user_data['car_price']} {user_data['currency']}\n\n"
        f"üìç<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {user_data['car_location']}\n"
        f"üë§<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> <span class='tg-spoiler'> {user_data['seller_name']} </span>\n"
        f"üì≤<b>–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> <span class='tg-spoiler'>{user_data['seller_phone']} </span>\n"
        f"üí¨<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> <span class='tg-spoiler'>@{message.from_user.username if message.from_user.username is not None else '–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}</span>\n\n"
        f" {hlink('Selbie Auto. –†—ã–Ω–æ–∫ —Ç–∞—á–µ–∫ –≤ –î–ù–†', 'https://t.me/selbieauto')} | {hlink('–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞–≤—Ç–æ', 'https://t.me/selbie_bot')} \n\n"
        f"<b>ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: #{user_data['new_id']}</b>"

    )

    for message in album:
        if message.photo:
            top_photo = message.photo[-1]
            user_data['sent_photos'].append(
                InputMediaPhoto(media=top_photo.file_id, caption=None, parse_mode="HTML"))

    user_data['sent_photos'][0].caption = caption

    await state.update_data(user_data)

    builder = ReplyKeyboardBuilder([[types.KeyboardButton(text="–°–ª–µ–¥—É—â–∏–π —à–∞–≥"), ]])
    if album:
        count_photos = len(album)
        msg = await message.reply(f'{count_photos} –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã', reply_markup=builder.as_markup(resize_keyboard=True))
        await add_message_id(state, msg.message_id)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–µ–π
    await state.set_state(Car.STATE_PREVIEW_ADVERTISMENT)


@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª")
async def send_advertisement(message: types.Message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)
    print('21', user_data)
    await add_data_to_excel(message, state)
    user_id = message.from_user.id
    await bot.send_media_group(chat_id=CHANNEL_ID, media=user_data['sent_photos'], disable_notification=True)
    builder = create_keyboard(['–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É'])
    msg = await bot.send_message(user_id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!",
                           reply_markup=builder.as_markup(resize_keyboard=True))
    await add_message_id(state, msg.message_id)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–µ–π
    # await state.clear()


# @router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
# async def fill_again(message: types.Message, state: FSMContext):
#     user_data = await state.get_data()
#     builder = create_keyboard(list(dict_car_brands_and_models.keys()))
#     image_path = ImageDirectory.auto_car_brand
#     with open(image_path, "rb"):
#         await message.answer_photo(photo=types.FSInputFile(image_path), caption="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:",
#                                    reply_markup=builder.as_markup(resize_keyboard=True))
#     user_data['sent_photos'].clear()
#     await state.clear()
#     await state.set_state(Car.STATE_CAR_BRAND)


@router.message(F.text == "–£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É")
async def promotion(message: types.Message, state):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)

    builder = create_keyboard(['–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞'])
    msg = await message.reply("–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∑–∞–∫—Ä–µ–ø, –Ω–∞–ø–∏—à–∏—Ç–µ @selbie_adv",
                        reply_markup=builder.as_markup(resize_keyboard=True))
    await add_message_id(state, msg.message_id)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–µ–π


@router.message(Car.STATE_PREVIEW_ADVERTISMENT)
async def preview_advertisement(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await delete_saved_messages(message, state)

    print('20', user_data)
    await bot.send_media_group(chat_id=message.chat.id, media=user_data['sent_photos'])

    builder = ReplyKeyboardBuilder([[
        KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª"),
        KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
    ]])

    msg = await message.reply(
        "–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –ª–∏–±–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=builder.as_markup(resize_keyboard=True))
    await add_message_id(state, msg.message_id)  # –¥–æ–±–∞–≤–ª—è–µ–º –∞–π–¥–∏—à–Ω–∏–∫ –¥–æ–ø —Ñ—É–Ω–∫—Ü–∏–µ–π

    # db_fix.clear()


async def add_data_to_excel(message, state):
    user_data = await state.get_data()
    print('22 excel', user_data)
    file_path = 'db.xlsx'
    row_data = [
        user_data['new_id'], datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        user_data['car_brand'], user_data['car_model'], user_data['car_year'], user_data['car_body_type'],
        user_data['car_engine_type'], user_data['car_engine_volume'], user_data['car_power'],
        user_data['car_transmission_type'], user_data['car_color'], user_data['car_mileage'],
        user_data['car_document_status'], user_data['car_owners'], user_data['car_customs_cleared'],
        user_data['car_condition'], user_data['car_description'], user_data['currency'], user_data['car_price'],
        user_data['car_location'], user_data['seller_name'], user_data['seller_phone'],
        message.from_user.username if message.from_user.username is not None else '–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
    ]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª Excel
    if os.path.exists(file_path):
        workbook = openpyxl.load_workbook(file_path)
    else:
        workbook = openpyxl.Workbook()
    sheet = workbook.active

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if sheet.max_row == 1:
        headers = [
            'ID', '–î–∞—Ç–∞', '–ë—Ä–µ–Ω–¥', '–ú–æ–¥–µ–ª—å', '–ì–æ–¥', '–¢–∏–ø –∫—É–∑–æ–≤–∞',
            '–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è', '–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª)', '–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.)', '–¢–∏–ø —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏',
            '–¶–≤–µ—Ç', '–ü—Ä–æ–±–µ–≥ (–∫–º)', '–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤', '–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω',
            '–°–æ—Å—Ç–æ—è–Ω–∏–µ', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', '–í–∞–ª—é—Ç–∞', '–¶–µ–Ω–∞',
            '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞', '–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞', '–¢–µ–ª–µ–≥—Ä–∞–º'

        ]
        sheet.append(headers)

    sheet.append(row_data)
    workbook.save(file_path)


# end support


# —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())
