# from main import *
import asyncio
import random
import datetime
import uuid
import openpyxl
import json

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hlink

from config import *
from states import *
from enumlist import *


# –ó–∞–≥—Ä—É–∑–∫–∞ JSON –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞
with open('dicts.json', 'r', encoding='utf-8') as file:
    dicts = json.load(file)

dict_car_brands_and_models = dicts.get("dict_car_brands_and_models", {})
dict_car_body_types = dicts.get("dict_car_body_types", {})
dict_car_engine_types = dicts.get("dict_car_engine_types", {})
dict_car_transmission_types = dicts.get("dict_car_transmission_types", {})
dict_car_colors = dicts.get("dict_car_colors", {})
dict_car_document_statuses = dicts.get("dict_car_document_statuses", {})
dict_car_owners = dicts.get("dict_car_owners", {})
dict_car_customs_cleared = dicts.get("dict_car_customs_cleared", {})
dict_currency = dicts.get("dict_currency", {})
dict_car_conditions = dicts.get("dict_car_conditions", {})
dict_car_mileages = dicts.get("dict_car_mileages", {})
dict_edit_buttons = dicts.get("dict_edit_buttons", {})
# –ö–æ–Ω–µ—Ü –∏–º–ø–æ—Ä—Ç–∞ json —Å–ª–æ–≤–∞—Ä–µ–π


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard(button_texts, resize_keyboard=True):
    keyboard = ReplyKeyboardMarkup(
        resize_keyboard=resize_keyboard, row_width=2)
    buttons = [KeyboardButton(text=text) for text in button_texts]
    keyboard.add(*buttons)
    return keyboard




class HRBotHandler:
    def __init__(self):
        self.lock = asyncio.Lock()


# –ö–æ–º–∞–Ω–¥—ã

    async def restart(self, event, state):
        await state.finish()
        await event.answer("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
        await self.start(event, state)

    async def support(self, event, state):
        await state.finish()
        self.secret_number = str(random.randint(100, 999))

        await event.answer(f"–ù–∞—à–ª–∏ –±–∞–≥? –î–∞–≤–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º! "
                             f"–ù–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É. –î–æ–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ {self.secret_number}:")
        await state.set_state(User.STATE_SUPPORT_VALIDATION)

    async def support_validation(self, event, state):
        if event.text.isdigit() and event.text == self.secret_number:
            await event.reply(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            await asyncio.sleep(1)
            await event.answer(f"–û–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –≤ –¥–µ—Ç–∞–ª—è—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ")
            await state.set_state(User.STATE_SUPPORT_MESSAGE)
        else:
            await event.answer(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
            await asyncio.sleep(1)
            await cmd_support(event, state)

    async def support_message(self, event: types.Message, state):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        message_to_write = f"""
        –î–∞—Ç–∞: {current_time}
        –ò–º—è: {event.from_user.full_name}
        Telegram @{event.from_user.username or event.from_user.id} 
      
        –°–æ–æ–±—â–µ–Ω–∏–µ: {event.text}
        ...
            """

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        with open("support.txt", "a") as file:
            file.write(message_to_write)
        keyboard = create_keyboard(['–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞'])
        await event.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É!", reply_markup=keyboard)
        await state.set_state(User.STATE_SUPPORT_END)
    async def support_end(selfself, event, state):
        if event.text == '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞':
            await cmd_restart(event, state)
        await state.finish()



# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

    async def start(self, event, state):
        image_hello_path = ImageDirectory.auto_say_hi
        with open(image_hello_path, "rb") as image_hello:
            self.m = await event.answer_photo(image_hello,
                                     caption=f"(–Ω–∞–π–º) –ü—Ä–∏–≤–µ—Ç, {event.from_user.first_name}! –î–∞–≤–∞–π –ø—Ä–æ–¥–∞–¥–∏–º —Ç–≤–æ—ë –∞–≤—Ç–æ! –ù–∞—á–Ω—ë–º –∂–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö!")
        await asyncio.sleep(0)
        # self.m = await event.answer(f"–ü—Ä–∏–≤–µ—Ç, {event.from_user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º.")
        # keyboard = create_keyboard(list(dict_car_brands_and_models.keys()))
        # image_path = ImageDirectory.auto_car_brand  # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        # with open(image_path, "rb") as image:
        #     self.m = await event.answer_photo(image, caption="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
        # self.m = await event.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
        await event.answer("–¢–µ–ø–µ—Ä—å —Ñ–æ—Ç–æ:")

        await state.set_state(User.STATE_HR_PHOTO)


    async def handle_photos3(self, event, state):
        user_data = await state.get_data('user_data')
        photo_id = event.photo[-1].file_id


        self.new_id = str(uuid.uuid4().int)[:6]

        caption = (
            f"üõû <b>#{user_data.get('user_data').get('car_brand')}-{user_data.get('user_data').get('car_model')}</b>\n\n"
            f"   <b>-–ì–æ–¥:</b> {user_data.get('user_data', {}).get('car_year')}\n"
            f"   <b>-–ü—Ä–æ–±–µ–≥ (–∫–º.):</b> {user_data.get('user_data').get('car_mileage')}\n"
            f"   <b>-–¢–∏–ø –ö–ü–ü:</b> {user_data.get('user_data').get('car_transmission_type')}\n"
            f"   <b>-–ö—É–∑–æ–≤:</b> {user_data.get('user_data').get('car_body_type')}\n"
            f"   <b>-–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:</b> {user_data.get('user_data').get('car_engine_type')}\n"
            f"   <b>-–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª.):</b> {user_data.get('user_data').get('car_engine_volume')}\n"
            f"   <b>-–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.):</b> {user_data.get('user_data').get('car_power')}\n"
            f"   <b>-–¶–≤–µ—Ç:</b> {user_data.get('user_data').get('car_color')}\n"
            f"   <b>-–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</b> {user_data.get('user_data').get('car_document_status')}\n"
            f"   <b>-–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:</b> {user_data.get('user_data').get('car_owners')}\n"
            f"   <b>-–†–∞—Å—Ç–∞–º–æ–∂–∫–∞:</b> {'–î–∞' if user_data.get('user_data').get('car_customs_cleared') else '–ù–µ—Ç'}\n"
            f"   <b>-–°–æ—Å—Ç–æ—è–Ω–∏–µ:</b> {user_data.get('user_data').get('car_condition')}\n\n"
            f"‚ÑπÔ∏è<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {user_data.get('user_data').get('car_description')}\n\n"
            f"üî•<b>–¶–µ–Ω–∞:</b> {user_data.get('user_data').get('car_price')} {user_data.get('user_data').get('currency')}\n\n"
            f"üìç<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {user_data.get('user_data').get('car_location')}\n"
            f"üë§<b>–ü—Ä–æ–¥–∞–≤–µ—Ü:</b> <span class='tg-spoiler'> {user_data.get('user_data').get('seller_name')} </span>\n"
            f"üì≤<b>–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> <span class='tg-spoiler'>{user_data.get('user_data').get('seller_phone')} </span>\n"
            f"üí¨<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> <span class='tg-spoiler'>@{event.from_user.username if event.from_user.username is not None else '–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}</span>\n\n"
            f" {hlink('Selbie Auto. –†—ã–Ω–æ–∫ —Ç–∞—á–µ–∫ –≤ –î–ù–†', 'https://t.me/selbieauto')} | {hlink('–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞–≤—Ç–æ', 'https://t.me/selbie_bot')} \n\n"
            f"<b>ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: #{self.new_id}</b>"
        )


        if "sent_photos" not in user_data:
            user_data["sent_photos"] = []

        user_data["sent_photos"].append(
            {"file_id": photo_id,})
        buffered_photos.append(InputMediaPhoto(
            media=photo_id, caption=caption, parse_mode=types.ParseMode.HTML))
        # # await self.m.delete()
        if len(buffered_photos) > 1:
            for i in range(len(buffered_photos) - 1):
                buffered_photos[i].caption = None
            last_photo = buffered_photos[-1]
            last_photo.caption = caption


        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("–°–ª–µ–¥—É—â–∏–π —à–∞–≥")
        )



        self.m = await event.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=keyboard)


        self.db_fix = user_data

        await state.finish()


    async def add_data_to_excel(self, event):
        file_path = 'db3.xlsx'


        row_data = [
            self.new_id,
            datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            self.db_fix.get('user_data').get('car_brand', ''),
            self.db_fix.get('user_data').get('car_model', ''),
            self.db_fix.get('user_data').get('car_year', ''),
            self.db_fix.get('user_data').get('car_mileage', ''),
            self.db_fix.get('user_data').get('car_transmission_type', ''),
            self.db_fix.get('user_data').get('car_body_type', ''),
            self.db_fix.get('user_data').get('car_engine_type', ''),
            self.db_fix.get('user_data').get('car_engine_volume', ''),
            self.db_fix.get('user_data').get('car_power', ''),
            self.db_fix.get('user_data').get('car_color', ''),
            self.db_fix.get('user_data').get('car_document_status', ''),
            self.db_fix.get('user_data').get('car_owners', ''),
            self.db_fix.get('user_data').get('car_customs_cleared'),
            self.db_fix.get('user_data').get('car_condition', ''),
            self.db_fix.get('user_data').get('car_description', ''),
            self.db_fix.get('user_data').get('car_price', ''),
            self.db_fix.get('user_data').get('currency', ''),
            self.db_fix.get('user_data').get('car_location', ''),
            self.db_fix.get('user_data').get('seller_name', ''),
            self.db_fix.get('user_data').get('seller_phone', ''),
            event.from_user.username if event.from_user.username is not None else '–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª Excel
        if os.path.exists(file_path):
            workbook = openpyxl.load_workbook(file_path)
        else:
            workbook = openpyxl.Workbook()
        sheet = workbook.active

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if sheet.max_row == 1:
            headers = [
                'ID','–î–∞—Ç–∞', '–ë—Ä–µ–Ω–¥', '–ú–æ–¥–µ–ª—å', '–ì–æ–¥', '–ü—Ä–æ–±–µ–≥ (–∫–º)', '–¢–∏–ø —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏',
                '–¢–∏–ø –∫—É–∑–æ–≤–∞', '–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è', '–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª)', '–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.)',
                '–¶–≤–µ—Ç', '–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤', '–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω',
                '–°–æ—Å—Ç–æ—è–Ω–∏–µ', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–í–∞–ª—é—Ç–∞',
                '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞', '–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞', '–¢–µ–ª–µ–≥—Ä–∞–º'
            ]
            sheet.append(headers)

        sheet.append(row_data)
        workbook.save(file_path)

    async def preview_advertisement(self, event):
        await bot.send_media_group(chat_id=event.chat.id, media=buffered_photos, disable_notification=True)

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª"),
            KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"),
        )
        await event.reply("–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –ª–∏–±–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=keyboard)

    async def send_advertisement(self, event):
        # user_id = event.from_user.id
        # await self.m.delete()
        async with lock:
            user_id = event.from_user.id
            await self.add_data_to_excel(event)
            await bot.send_media_group(chat_id=CHANNEL_ID, media=buffered_photos, disable_notification=True)
            keyboard = create_keyboard(['–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É'])
            await bot.send_message(user_id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!", reply_markup=keyboard)

            buffered_photos.clear()


    async def fill_again(self, event, state):
        keyboard = create_keyboard(list(dict_car_brands_and_models.keys()))
        image_path = ImageDirectory.auto_car_brand # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        with open(image_path, "rb") as image:
            self.m = await event.answer_photo(image, caption="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
        # self.m = await event.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
        async with lock:
            buffered_photos.clear()
        await state.set_state(User.STATE_CAR_BRAND)

    async def add_more(self, event, state):
        await hr_bot.restart(event, state)

    async def promotion(self, event, state):
        keyboard = create_keyboard(['–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞'])
        await event.reply("–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∑–∞–∫—Ä–µ–ø –Ω–∞–ø–∏—à–∏—Ç–µ @selbie_adv", reply_markup=keyboard)


hr_bot = HRBotHandler()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
lock = asyncio.Lock()
buffered_photos = []


@dp.message_handler(lambda message: message.text == "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", state='*')
@dp.message_handler(commands=['restart'], state='*')
async def cmd_restart(event: types.Message, state: FSMContext):
    await hr_bot.restart(event, state)


@dp.message_handler(commands=["start"])
async def cmd_start(event: types.Message, state: FSMContext):
    await hr_bot.start(event, state)

#support
@dp.message_handler(commands=['support'], state='*')
async def cmd_support(event: types.Message, state: FSMContext):
    await hr_bot.support(event, state)

@dp.message_handler(state=User.STATE_SUPPORT_VALIDATION)
async def support_validation(event: types.Message, state: FSMContext):
    await hr_bot.support_validation(event, state)

@dp.message_handler(state=User.STATE_SUPPORT_MESSAGE)
async def support_message(event: types.Message, state: FSMContext):
    await hr_bot.support_message(event, state)

@dp.message_handler(state=User.STATE_SUPPORT_END)
async def support_end(event: types.Message, state: FSMContext):
    await hr_bot.restart(event, state)
# end support

@dp.message_handler(state=User.STATE_HR_PHOTO, content_types=['photo'])
async def handle_photos3(event: types.Message, state: FSMContext):
    await hr_bot.handle_photos3(event, state)


@dp.message_handler(lambda message: message.text == "–°–ª–µ–¥—É—â–∏–π —à–∞–≥")
async def preview_advertisement(event: types.Message):
    await hr_bot.preview_advertisement(event)


@dp.message_handler(lambda message: message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª")
async def send_advertisement(event: types.Message, state: FSMContext):
    await hr_bot.send_advertisement(event)

@dp.message_handler(lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
async def fill_again(event: types.Message, state: FSMContext):
    await hr_bot.fill_again(event, state)

@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
async def add_more(event: types.Message, state: FSMContext):
    await hr_bot.add_more(event, state)

@dp.message_handler(lambda message: message.text == "–£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É")
async def promotion(event: types.Message, state: FSMContext):
    await hr_bot.promotion(event, state)


# —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
