import asyncio
from aiogram import Bot, Dispatcher, Router, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import random
import datetime
import uuid
import openpyxl
from config import *
from states import *
from validation import *
import json
from enumlist import *

router = Router(name=__name__)
buffered_photos = []
lock = asyncio.Lock()
storage=MemoryStorage()
session = AiohttpSession()
bot_settings = {"session": session, "parse_mode": ParseMode.HTML}
bot = Bot(token=API_TOKEN)

async def main():
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)



# –ó–∞–≥—Ä—É–∑–∫–∞ JSON –≤ –Ω–∞—á–∞–ª–µ —Å–∫—Ä–∏–ø—Ç–∞
with open('dicts.json', 'r', encoding='utf-8') as file:
    dicts = json.load(file)

dict_car_brands_and_models = dicts.get("dict_car_brands_and_models", {})
dict_car_body_types = dicts.get("dict_car_body_types", {})
dict_car_engine_types = dicts.get("dict_car_engine_types", {})
dict_car_transmission_types = dicts.get("dict_car_transmission_types", {})
dict_car_colors = dicts.get("dict_car_colors", {})
dict_car_document_statuses = dicts.get("dict_car_document_statuses", {})
dict_car_owners = dicts.get("dict_car_owners", {})
dict_car_customs_cleared = dicts.get("dict_car_customs_cleared", {})
dict_currency = dicts.get("dict_currency", {})
dict_car_conditions = dicts.get("dict_car_conditions", {})
dict_car_mileages = dicts.get("dict_car_mileages", {})
dict_edit_buttons = dicts.get("dict_edit_buttons", {})
# –ö–æ–Ω–µ—Ü –∏–º–ø–æ—Ä—Ç–∞ json —Å–ª–æ–≤–∞—Ä–µ–π


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# def create_keyboard(button_texts, resize_keyboard=True):
#     keyboard = ReplyKeyboardMarkup(resize_keyboard=resize_keyboard, row_width=2)
#     buttons = [KeyboardButton(text=text) for text in button_texts]
#     keyboard.add(*buttons)
#     return keyboard

def create_keyboard(button_texts):
    builder = ReplyKeyboardBuilder(
        [types.KeyboardButton(text) for text in button_texts]
    )
    return builder


class CarBotHandler:
    def __init__(self):
        self.lock = asyncio.Lock()
        self.car_bot = CarBotHandler()

# –ö–æ–º–∞–Ω–¥—ã
    @router.message(F.text == "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞")
    async def restart(self, event: types.Message, state: FSMContext):
        await state.finish()
        await event.answer("–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
        await self.start(event, state)

    @router.message(Command("support"))
    async def support(self, event: types.Message, state: FSMContext):
        await state.finish()
        self.secret_number = str(random.randint(100, 999))

        await event.answer(f"–ù–∞—à–ª–∏ –±–∞–≥? –î–∞–≤–∞–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º! "
                             f"–ù–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É. –î–æ–∫–∞–∂–∏—Ç–µ —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ {self.secret_number}:")
        await state.set_state(User.STATE_SUPPORT_VALIDATION)

    @router.message(User.STATE_SUPPORT_VALIDATION)
    async def support_validation(self, event: types.Message, state: FSMContext):
        if event.text.isdigit() and event.text == self.secret_number:
            await event.reply(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            await asyncio.sleep(1)
            await event.answer(f"–û–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –≤ –¥–µ—Ç–∞–ª—è—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: ")
            await state.set_state(User.STATE_SUPPORT_MESSAGE)
        else:
            await event.answer(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")
            await asyncio.sleep(1)
            await self.car_bot.support(event, state)

    @router.message(User.STATE_SUPPORT_MESSAGE)
    async def support_message(self, event: types.Message, state: FSMContext):
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message_to_write = f"""
        –î–∞—Ç–∞: {current_time}
        –ò–º—è: {event.from_user.full_name}
        Telegram @{event.from_user.username or event.from_user.id} 
      
        –°–æ–æ–±—â–µ–Ω–∏–µ: {event.text}
        ...
            """

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        with open("support.txt", "a") as file:
            file.write(message_to_write)
        builder = create_keyboard(['–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞'])
        await event.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É!", reply_markup=builder.as_markup(resize_keyboard=True))
        await state.set_state(User.STATE_SUPPORT_END)

    @router.message(User.STATE_SUPPORT_END)
    async def support_end(self, event: types.Message, state: FSMContext):
        await self.car_bot.restart(event, state)


# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

    @router.message(CommandStart())
    async def start(message: types.Message, state: FSMContext):
        image_hello_path = ImageDirectory.auto_say_hi
        with open(image_hello_path, "rb") as image_hello:
            input_file = types.InputFile(image_hello)
            await bot.send_photo(chat_id=message.from_user.id, photo=input_file,
                                     caption=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –î–∞–≤–∞–π –ø—Ä–æ–¥–∞–¥–∏–º —Ç–≤–æ—ë –∞–≤—Ç–æ! –ù–∞—á–Ω—ë–º –∂–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö!")
        await asyncio.sleep(0)
        builder = create_keyboard(list(dict_car_brands_and_models.keys()))
        image_path = ImageDirectory.auto_car_brand
        with open(image_path, "rb") as image:
            await bot.send_photo(image, caption="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=builder.as_markup(resize_keyboard=True))
        await state.set_state(User.STATE_CAR_BRAND)

    @router.message(User.STATE_CAR_BRAND)
    async def get_car_brand(self, event: types.Message, state: FSMContext):
        user_data = (await state.get_data()).get("user_data", {})
        selected_brand = event.text
        valid_brands = dict_car_brands_and_models
        if await validate_car_brand(selected_brand, valid_brands):
            user_data["car_brand"] = selected_brand
            await state.update_data(user_data=user_data)
            keyboard = create_keyboard(
                dict_car_brands_and_models[selected_brand])
            image_path = ImageDirectory.auto_car_model
            with open(image_path, "rb") as image:
                await event.answer_photo(image, caption="–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
            await state.set_state(User.STATE_CAR_MODEL)
        else:
            keyboard = create_keyboard(dict_car_brands_and_models.keys())
            await bot.send_message(event.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –µ—Å–ª–∏ –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞ –Ω–µ—Ç", reply_markup=keyboard)
            await state.set_state(User.STATE_CAR_PHOTO)

    @router.message(User.STATE_CAR_PHOTO, F.photo)
    async def handle_photos(self, event: types.Message, state: FSMContext):
        user_data = await state.get_data('user_data')
        photo_id = event.photo[-1].file_id


        self.new_id = str(uuid.uuid4().int)[:6]

        caption = (
            f"üõû <b>#{user_data.get('user_data').get('car_brand')}-"
            f"üí¨<b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> <span class='tg-spoiler'>{event.from_user.username if event.from_user.username is not None else '–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}</span>\n\n"
            f"–û–û–û '–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ' –ê–≤—Ç–æ –≤ –î–ù–† (link: —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞–≤—Ç–æ)\n\n"
            f"<b>ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è: #{self.new_id}</b>"
        )




        if "sent_photos" not in user_data:
            user_data["sent_photos"] = []

        user_data["sent_photos"].append(
            {"file_id": photo_id,})
        buffered_photos.append(InputMediaPhoto(
            media=photo_id, caption=caption, parse_mode=ParseMode.HTML))
        if len(buffered_photos) > 1:
            for i in range(len(buffered_photos) - 1):
                buffered_photos[i].caption = None
            last_photo = buffered_photos[-1]
            last_photo.caption = caption

        keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("–°–ª–µ–¥—É—â–∏–π —à–∞–≥")
        )

        await event.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ", reply_markup=keyboard)

        self.db_fix = user_data
        await state.finish()

    async def add_data_to_excel(self, event):
        file_path = 'db.xlsx'

        row_data = [
            self.new_id,
            datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            self.db_fix.get('user_data').get('car_brand', ''),
            self.db_fix.get('user_data').get('car_model', ''),
            self.db_fix.get('user_data').get('car_year', ''),
            self.db_fix.get('user_data').get('car_mileage', ''),
            self.db_fix.get('user_data').get('car_transmission_type', ''),
            self.db_fix.get('user_data').get('car_body_type', ''),
            self.db_fix.get('user_data').get('car_engine_type', ''),
            self.db_fix.get('user_data').get('car_engine_volume', ''),
            self.db_fix.get('user_data').get('car_power', ''),
            self.db_fix.get('user_data').get('car_color', ''),
            self.db_fix.get('user_data').get('car_document_status', ''),
            self.db_fix.get('user_data').get('car_owners', ''),
            self.db_fix.get('user_data').get('car_customs_cleared'),
            self.db_fix.get('user_data').get('car_condition', ''),
            self.db_fix.get('user_data').get('car_description', ''),
            self.db_fix.get('user_data').get('car_price', ''),
            self.db_fix.get('user_data').get('currency', ''),
            self.db_fix.get('user_data').get('car_location', ''),
            self.db_fix.get('user_data').get('seller_name', ''),
            self.db_fix.get('user_data').get('seller_phone', ''),
            event.from_user.username if event.from_user.username is not None else '–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        ]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª Excel
        if os.path.exists(file_path):
            workbook = openpyxl.load_workbook(file_path)
        else:
            workbook = openpyxl.Workbook()
        sheet = workbook.active

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if sheet.max_row == 1:
            headers = [
                'ID','–î–∞—Ç–∞', '–ë—Ä–µ–Ω–¥', '–ú–æ–¥–µ–ª—å', '–ì–æ–¥', '–ü—Ä–æ–±–µ–≥ (–∫–º)', '–¢–∏–ø —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–∏',
                '–¢–∏–ø –∫—É–∑–æ–≤–∞', '–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è', '–û–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª)', '–ú–æ—â–Ω–æ—Å—Ç—å (–ª.—Å.)',
                '–¶–≤–µ—Ç', '–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤', '–†–∞—Å—Ç–∞–º–æ–∂–µ–Ω',
                '–°–æ—Å—Ç–æ—è–Ω–∏–µ', '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–í–∞–ª—é—Ç–∞',
                '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–ò–º—è –ø—Ä–æ–¥–∞–≤—Ü–∞', '–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–¥–∞–≤—Ü–∞', '–¢–µ–ª–µ–≥—Ä–∞–º'
            ]
            sheet.append(headers)

        sheet.append(row_data)
        workbook.save(file_path)

    @router.message(F.text == "–°–ª–µ–¥—É—â–∏–π —à–∞–≥")
    async def preview_advertisement(self, event: types.Message):
        await bot.send_media_group(chat_id=event.chat.id, media=buffered_photos, disable_notification=True)
        builder = ReplyKeyboardMarkup(resize_keyboard=True).add(
            KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª"),
            KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ"),
        )
        await event.reply("–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –ª–∏–±–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ª–∏–±–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=builder.as_markup(resize_keyboard=True))

    @router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª")
    async def send_advertisement(self, event: types.Message):
        async with lock:
            user_id = event.from_user.id
            await self.add_data_to_excel(event)
            await bot.send_media_group(chat_id=CHANNEL_ID, media=buffered_photos, disable_notification=True)
            builder = create_keyboard(['–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ', '–£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É'])
            await bot.send_message(user_id, "–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª!", reply_markup=builder.as_markup(resize_keyboard=True))

            buffered_photos.clear()

    @router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
    async def fill_again(self, event: types.Message, state: FSMContext):
        builder = create_keyboard(list(dict_car_brands_and_models.keys()))
        image_path = ImageDirectory.auto_car_brand # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        with open(image_path, "rb") as image:
            await event.answer_photo(image, caption="–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=builder.as_markup(resize_keyboard=True))
        async with lock:
            buffered_photos.clear()
        await state.set_state(User.STATE_CAR_BRAND)

    @router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–±—ä—è–≤–ª–µ–Ω–∏–µ")
    async def add_more(self, event: types.Message, state: FSMContext):
        await self.car_bot.restart(event, state)

    @router.message(F.text == "–£—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É")
    async def promotion(self, event: types.Message):
        builder = create_keyboard(['–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞'])
        await event.reply("–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –∑–∞–∫—Ä–µ–ø –Ω–∞–ø–∏—à–∏—Ç–µ @n9dmitry", reply_markup=builder.as_markup(resize_keyboard=True))
# end support


# —Å—Ç–∞—Ä—Ç –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())
